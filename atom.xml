<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James Hoi&#39;s Blog</title>
  
  
  <link href="https://jameshoi.github.io/atom.xml" rel="self"/>
  
  <link href="https://jameshoi.github.io/"/>
  <updated>2023-08-30T09:29:12.310Z</updated>
  <id>https://jameshoi.github.io/</id>
  
  <author>
    <name>James Hoi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习以及强化学习笔记</title>
    <link href="https://jameshoi.github.io/2023/08/01/ai/"/>
    <id>https://jameshoi.github.io/2023/08/01/ai/</id>
    <published>2023-08-01T07:51:17.000Z</published>
    <updated>2023-08-30T09:29:12.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="识别拼图网络"><a href="#识别拼图网络" class="headerlink" title="识别拼图网络"></a>识别拼图网络</h2><h2 id="mask-rcnn识别"><a href="#mask-rcnn识别" class="headerlink" title="mask rcnn识别"></a>mask rcnn识别</h2><h2 id="RL学习"><a href="#RL学习" class="headerlink" title="RL学习"></a>RL学习</h2><p>占坑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;识别拼图网络&quot;&gt;&lt;a href=&quot;#识别拼图网络&quot; class=&quot;headerlink&quot; title=&quot;识别拼图网络&quot;&gt;&lt;/a&gt;识别拼图网络&lt;/h2&gt;&lt;h2 id=&quot;mask-rcnn识别&quot;&gt;&lt;a href=&quot;#mask-rcnn识别&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="深度学习" scheme="https://jameshoi.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="强化学习" scheme="https://jameshoi.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>之前画的一些硬件PCB</title>
    <link href="https://jameshoi.github.io/2023/08/01/hardware/"/>
    <id>https://jameshoi.github.io/2023/08/01/hardware/</id>
    <published>2023-08-01T07:51:17.000Z</published>
    <updated>2023-08-30T09:40:53.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="之前画的一些PCB"><a href="#之前画的一些PCB" class="headerlink" title="之前画的一些PCB"></a>之前画的一些PCB</h1><p><a href="https://github.com/JamesHoi/DIY-Hardware">GitHub - JamesHoi/DIY-Hardware</a></p><h2 id="无线功率计"><a href="#无线功率计" class="headerlink" title="无线功率计"></a>无线功率计</h2><p>由于需要测量移动机器人的功率，在全速运行时不方便追着用万用表测量，因此设计一款可近距离无线的功率计+监控器</p><h2 id="装甲板"><a href="#装甲板" class="headerlink" title="装甲板"></a>装甲板</h2><p>复现Robomaster官方装甲板，回收旧品改造，省去机械部分，很多功能都实现完了<a href="https://github.com/CygnoidesV/armor-plate">GitHub - CygnoidesV/armor-plate: Robomaster手持装甲板</a></p><h2 id="全场定位"><a href="#全场定位" class="headerlink" title="全场定位"></a>全场定位</h2><p>里程计，九轴+磁编码器</p><h2 id="232转TTL"><a href="#232转TTL" class="headerlink" title="232转TTL"></a>232转TTL</h2><p>简单的用max3232芯片并加了接口</p><h2 id="Badusb"><a href="#Badusb" class="headerlink" title="Badusb"></a>Badusb</h2><p>挑了挑usb外壳，毕业前再做吧</p><h2 id="usb转can"><a href="#usb转can" class="headerlink" title="usb转can"></a>usb转can</h2><p>打算是stm32f103c8t6+gh1.25 can接口，和badusb方案差不多，外设不多，难度在can分析的软件：测量总线负载，显示数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;之前画的一些PCB&quot;&gt;&lt;a href=&quot;#之前画的一些PCB&quot; class=&quot;headerlink&quot; title=&quot;之前画的一些PCB&quot;&gt;&lt;/a&gt;之前画的一些PCB&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JamesHoi/DIY-H</summary>
      
    
    
    
    <category term="硬件" scheme="https://jameshoi.github.io/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="硬件" scheme="https://jameshoi.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="Robomaster" scheme="https://jameshoi.github.io/tags/Robomaster/"/>
    
  </entry>
  
  <entry>
    <title>Robomaster能量机关复现</title>
    <link href="https://jameshoi.github.io/2023/08/01/rmuc/"/>
    <id>https://jameshoi.github.io/2023/08/01/rmuc/</id>
    <published>2023-08-01T07:51:17.000Z</published>
    <updated>2023-08-30T09:21:17.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装甲板复现"><a href="#装甲板复现" class="headerlink" title="装甲板复现"></a>装甲板复现</h2><p>由于规则的修改，现在击打能量机关的装甲板改为圆形，对击打的环数进行判断，越准越高分，所以我们打算对其进行复现</p><p><img title src="/2023/08/01/rmuc/3c4bbe5ffe4f311b35ce64dace61bb85b039db9d.png" alt width="429"></p><p>每个环都是宽15mm，整体再外最外圈有多5mm，厚度14.3，弹丸直径17mm</p><h2 id="定位射击子弹"><a href="#定位射击子弹" class="headerlink" title="定位射击子弹"></a>定位射击子弹</h2><p>当然关键的问题就是定位，要定位弹丸的击打位置，最先想的方案是通过应变片的形变大小定位，但安装上必定误差特别大，不好实现，因为面板前面还需要有一圈一圈的灯。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>前面预想的应变片不好实现，转换一下思路，在淘宝找到了阵列式的柔性压力传感器，但若买商家现成产品大小会不符合，定制的话，开模设计打样费2万起，20个样品。其次还是上一个提到的问题，这个传感器不透光，放在PCB和灯条后面大几率击打效果不好</p><p><img src="/2023/08/01/rmuc/2.png" alt></p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>方案二为通过多个tof激光雷达测距定位弹丸，了解过GNSS定位的都应该听过三点定位方法，通过已知和多个卫星的距离解方程得到设备的位置。</p><p>tof激光雷达原理</p><p><img src="/2023/08/01/rmuc/7c983d72039fa1071c080ee8d7304b3198855e66.png" title alt width="311"></p><p>主要可选的传感器为VL6180X，VL53L0X，VL53L1X，主要区别如下图</p><p><img src="/2023/08/01/rmuc/7a888ded85ec64a102f6197398b8a7b4906b9776.png" title alt width="530"></p><p><img src="https://www.st.com/content/ccc/fragment/product_related/subclass_information/subclass_level_diagram/group0/b6/01/b3/f4/0e/f8/4a/21/ST21305_BN_FlightSense_2B/files/ST21305_BN_FlightSense_2B.jpg/_jcr_content/translations/en.ST21305_BN_FlightSense_2B.jpg" alt="tof sensor portfolio"></p><p>综上所述，量程需要在30cm以上，最后选择VL53L0X</p><h4 id="VL53L0X"><a href="#VL53L0X" class="headerlink" title="VL53L0X"></a>VL53L0X</h4><p><img src="/2023/08/01/rmuc/1a343ad324d7df3383206618b15b083ff23b90ae.png" title alt width="405"></p><p>发射fov为35°，接收为25°，根据资料<a href="http://47.111.11.73/thread-312799-1-1.html">关于VL53L0X测距的一点分享-OpenEdv-开源电子网</a>盲区大致为30至40mm</p><p>当传感器个数n=4时，可检测范围大致就是下图彩色范围（注：当时没画好，将就吧）</p><p><img src="/2023/08/01/rmuc/3f67a2f90c64c36df0b4f96477b5226e2e1adba8.jpg" title alt width="449"></p><p>算法基本参考TDOA，参考文章</p><p><a href="https://blog.csdn.net/jjmjim/article/details/108405292">使用RANSAC的鲁棒TDOA Chan定位算法_姜小明同学的博客-CSDN博客_最小残差加权算法chan tdoa</a></p><p><a href="https://blog.csdn.net/chenxy_bwave/article/details/120225611">TDOA算法综述(An overview of TDOA algorithm)—(1)_笨牛慢耕的博客-CSDN博客_tdoa算法</a></p><p><a href="https://blog.csdn.net/summer_dew/article/details/79901654">[最小二乘法] 多边定位—求解未知点坐标_geodoer的博客-CSDN博客_最小二乘法定位</a></p><p><a href="https://wap.cnki.net/touch/web/Dissertation/Article/10183-1012371752.nh.html">基于K-means聚类和数据一致性的WSN多边定位算法-手机知网</a></p><p><a href="https://blog.csdn.net/qq_21291397/article/details/103983016">TDOA定位方法的Fang算法的程序实现（二维）_qq_21291397的博客-CSDN博客_fang算法</a></p><p><a href="https://blog.csdn.net/qq_23947237/article/details/82715784">Chan 定位算法_本帅哥屏蔽了凡人的博客-CSDN博客_chan定位算法,wls 和wl的区别</a></p><p>基本思路即最小二乘法，应用时编写矩阵运算函数即可</p><h4 id="Matlab仿真"><a href="#Matlab仿真" class="headerlink" title="Matlab仿真"></a>Matlab仿真</h4><p>仿真的主要目的为：</p><ol><li><p>进行误差分析，计算若安装误差在±1cm内，检测误差为多少？</p></li><li><p>计算最合理传感器个数</p></li><li><p>使用最小二乘法是否会出现不可逆矩阵？实际应用该如何解决</p></li></ol><p>其中第二点可见上图，由于该传感器接收的fov为25°，当传感器数量n=4时甚至不能覆盖到某些地方的六环。</p><h4 id="传感器个数和失误率的关系"><a href="#传感器个数和失误率的关系" class="headerlink" title="传感器个数和失误率的关系"></a>传感器个数和失误率的关系</h4><p>按道理来讲可以进行数学推导计算出最佳的传感器个数，但过程可能稍微复杂，且工程实际应用时能接受一定的误差。最后采用统计的方式得到，下图是40000次测试的结果</p><p>失误率：无法计算出打击位置的几率</p><p><img src="/2023/08/01/rmuc/5e0112b7a7fa293439d5421ffddd9b0aac26511f.png" alt></p><p>这图z轴是检测不到打击位置的几率（失误率），0到25是传感器个数，1到10是环数</p><p>Matlab代码如下，orientation返回的point是：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">clear;</span><br><span class="line">test_time = <span class="number">40000</span>;</span><br><span class="line">c = <span class="built_in">zeros</span>(<span class="number">25</span>,<span class="number">10</span>);</span><br><span class="line">count = <span class="built_in">zeros</span>(<span class="number">25</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> n=<span class="number">4</span>:<span class="number">25</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:test_time</span><br><span class="line">        [point,point1,point2,num] = orientation(n);</span><br><span class="line">        c(n,point) = c(n,point)+(num&lt;<span class="number">3</span>);</span><br><span class="line">        count(n,point) = count(n,point)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c = c./count*<span class="number">100</span>;</span><br><span class="line">bar3(c);</span><br></pre></td></tr></table></figure><p>orientation.m代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[point,num]</span> = <span class="title">orientation</span><span class="params">(n)</span></span></span><br><span class="line">r = <span class="number">150</span>; <span class="comment">%装甲板半径，单位mm</span></span><br><span class="line">err = <span class="number">2</span>; <span class="comment">%传感器精度为2mm，盲区为30~40mm</span></span><br><span class="line">err_install = <span class="number">20</span>; <span class="comment">%安装误差2cm内</span></span><br><span class="line"><span class="comment">% 画圆</span></span><br><span class="line">th = <span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">xunit = r.*<span class="built_in">cos</span>(th);</span><br><span class="line">yunit = r.*<span class="built_in">sin</span>(th);</span><br><span class="line"><span class="built_in">plot</span>(xunit, yunit,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">axis equal</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">% 画传感器所在的位置</span></span><br><span class="line">angles = (<span class="number">1</span>/n:<span class="number">1</span>/n:<span class="number">1</span>)*<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">xdata = r.*<span class="built_in">cos</span>(angles);</span><br><span class="line">ydata = r.*<span class="built_in">sin</span>(angles);</span><br><span class="line"><span class="built_in">plot</span>(xdata,ydata,<span class="string">&quot;b*&quot;</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成随机一点</span></span><br><span class="line">theta = <span class="built_in">rand</span>*(<span class="number">2</span>*<span class="built_in">pi</span>);</span><br><span class="line">r0 = <span class="built_in">rand</span>*r;</span><br><span class="line">x = r0.*<span class="built_in">cos</span>(theta);</span><br><span class="line">y = r0.*<span class="built_in">sin</span>(theta);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&quot;bo&quot;</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">% 计算测量到的距离</span></span><br><span class="line">d = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">d1 = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    err_x = -err_install + <span class="number">2</span>*err_install*<span class="built_in">rand</span>(<span class="number">1</span>); <span class="comment">% +-安装误差</span></span><br><span class="line">    err_y = -err_install + <span class="number">2</span>*err_install*<span class="built_in">rand</span>(<span class="number">1</span>);</span><br><span class="line">    a = [xdata(<span class="built_in">i</span>)+err_x ydata(<span class="built_in">i</span>)+err_y];</span><br><span class="line">    b = [x y];</span><br><span class="line">    d(<span class="built_in">i</span>) = <span class="built_in">fix</span>(norm(a-b)+err*<span class="built_in">rand</span>);</span><br><span class="line">    d1(<span class="built_in">i</span>) = d(<span class="built_in">i</span>)-d(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 方法一泰勒展开取一次项，降维转线性，计算参数l和m</span></span><br><span class="line">d0 = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">l = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">m = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    a = [xdata(<span class="built_in">i</span>) ydata(<span class="built_in">i</span>)];</span><br><span class="line">    d0(<span class="built_in">i</span>) = r;</span><br><span class="line">    l(<span class="built_in">i</span>) = xdata(<span class="built_in">i</span>)/d0(<span class="built_in">i</span>);</span><br><span class="line">    m(<span class="built_in">i</span>) = ydata(<span class="built_in">i</span>)/d0(<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">A = [l m];</span><br><span class="line">L = d0-d;</span><br><span class="line">X = (A&#x27;*A)\(A&#x27;*L);</span><br><span class="line"><span class="built_in">plot</span>(X(<span class="number">1</span>),X(<span class="number">2</span>),<span class="string">&quot;g*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 方法二</span></span><br><span class="line"><span class="comment">% 计算到基站一的距离</span></span><br><span class="line">x1 = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">y1 = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">c = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line">K = <span class="built_in">zeros</span>(n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    K(<span class="built_in">i</span>) = xdata(<span class="built_in">i</span>)^<span class="number">2</span>+ydata(<span class="built_in">i</span>)^<span class="number">2</span>;</span><br><span class="line">    x1(<span class="built_in">i</span>) = xdata(<span class="built_in">i</span>)-xdata(<span class="number">1</span>);</span><br><span class="line">    y1(<span class="built_in">i</span>) = ydata(<span class="built_in">i</span>)-ydata(<span class="number">1</span>);</span><br><span class="line">    c(<span class="built_in">i</span>) = (K(<span class="built_in">i</span>)-K(<span class="number">1</span>))-(d1(<span class="built_in">i</span>)^<span class="number">2</span>+<span class="number">2</span>*d1(<span class="built_in">i</span>)*d(<span class="number">1</span>));</span><br><span class="line">    c(<span class="built_in">i</span>) = c(<span class="built_in">i</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">A = [x1 y1];</span><br><span class="line">A = A(<span class="number">2</span>:<span class="keyword">end</span>,:);</span><br><span class="line">L = c(<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">X = (A&#x27;*A)\(A&#x27;*L);</span><br><span class="line"><span class="built_in">plot</span>(X(<span class="number">1</span>),X(<span class="number">2</span>),<span class="string">&quot;r*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 检测fov25°传感器个数</span></span><br><span class="line">c = <span class="built_in">zeros</span>(<span class="number">1</span>,n);</span><br><span class="line">e = <span class="built_in">zeros</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    a = [xdata(<span class="built_in">i</span>) ydata(<span class="built_in">i</span>)];</span><br><span class="line">    b = [xdata(<span class="built_in">i</span>)-x ydata(<span class="built_in">i</span>)-y];</span><br><span class="line">    c(<span class="built_in">i</span>) = <span class="built_in">acos</span>(<span class="built_in">dot</span>(a,b)/norm(a)/norm(b));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">point = <span class="number">10</span>-<span class="built_in">floor</span>(norm([x y])/<span class="number">15</span>);</span><br><span class="line">num = sum((c&lt;(<span class="number">12.5</span>/<span class="number">180</span>*<span class="built_in">pi</span>))&amp;(d&#x27;&gt;<span class="number">40</span>)); <span class="comment">% 加上盲区判断，最大盲区值为40mm</span></span><br><span class="line">s = sprintf(<span class="string">&quot;识别到的传感器个数：%d，环数：%d&quot;</span>,num,point);</span><br><span class="line"><span class="built_in">disp</span>(s);</span><br></pre></td></tr></table></figure><h4 id="如何仿真计算出传感器是否在fov范围内？"><a href="#如何仿真计算出传感器是否在fov范围内？" class="headerlink" title="如何仿真计算出传感器是否在fov范围内？"></a>如何仿真计算出传感器是否在fov范围内？</h4><p>orientation.m的最后一段代码其实已经给出，已知目标位置和传感器位置，通过点乘除以向量模长就可以得到两点间夹角，再加上c&lt;25/2的判断，结合盲区，得到该传感器是否能检测到物体。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 检测fov25°传感器个数</span></span><br><span class="line">c = <span class="built_in">zeros</span>(<span class="number">1</span>,n);</span><br><span class="line">e = <span class="built_in">zeros</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    a = [xdata(<span class="built_in">i</span>) ydata(<span class="built_in">i</span>)];</span><br><span class="line">    b = [xdata(<span class="built_in">i</span>)-x ydata(<span class="built_in">i</span>)-y];</span><br><span class="line">    c(<span class="built_in">i</span>) = <span class="built_in">acos</span>(<span class="built_in">dot</span>(a,b)/norm(a)/norm(b));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">point = <span class="number">10</span>-<span class="built_in">floor</span>(norm([x y])/<span class="number">15</span>);</span><br><span class="line">num = sum((c&lt;(<span class="number">12.5</span>/<span class="number">180</span>*<span class="built_in">pi</span>))&amp;(d&#x27;&gt;<span class="number">40</span>)); <span class="comment">% 加上盲区判断，最大盲区值为40mm</span></span><br><span class="line">s = sprintf(<span class="string">&quot;识别到的传感器个数：%d，环数：%d&quot;</span>,num,point);</span><br><span class="line"><span class="built_in">disp</span>(s);</span><br></pre></td></tr></table></figure><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>蓝色圆圈为目标实际位置</p><p>方法一（绿色星号）参考文章<a href="https://blog.csdn.net/summer_dew/article/details/79901654">[最小二乘法] 多边定位—求解未知点坐标_最小二乘法求坐标_geodoer的博客-CSDN博客</a></p><p>方法二（红色星号）参考文章<a href="https://blog.csdn.net/qq_23947237/article/details/82715784">Chan 定位算法_chan uwb_本帅哥屏蔽了凡人的博客-CSDN博客</a></p><p>实际两种方法都是转换为线性方程组再用最小二乘法求坐标点</p><p>实际上仿真代码有问题，需确定能识别到再进行定位，但由于此方法最后废弃，代码不再改进。</p><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p>n=20，err_install = 0，可见当无安装误差时，环数越小方法一越不准</p><p><img src="/2023/08/01/rmuc/2023-08-30-16-26-39-image.png" alt></p><p>测试环数准确率</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clear;</span><br><span class="line">test_time = <span class="number">40000</span>;</span><br><span class="line">n = <span class="number">20</span>;</span><br><span class="line">c = <span class="built_in">zeros</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">count = <span class="built_in">zeros</span>(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:test_time</span><br><span class="line">    [point,point1,point2,num] = orientation(n);</span><br><span class="line">    count(point) = count(point) + <span class="number">1</span>;</span><br><span class="line">    c(point,<span class="number">1</span>) = c(point,<span class="number">1</span>) + (point~=point1);</span><br><span class="line">    c(point,<span class="number">2</span>) = c(point,<span class="number">2</span>) + (point~=point2);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">tmp = c./count.*<span class="number">100</span>;</span><br><span class="line">bar3(tmp);</span><br><span class="line">_time.*<span class="number">100</span></span><br></pre></td></tr></table></figure><p>当error_install = 0时，环数准确度的统计，1为方法一，2为方法2</p><p><img src="/2023/08/01/rmuc/2023-08-30-17-03-17-image.png" alt></p><p>当error_install = 10，即安装误差为正负1cm时，环数准确度如下</p><p><img src="/2023/08/01/rmuc/2023-08-30-17-05-03-image.png" alt></p><p>当error_install = 20时</p><p><img src="/2023/08/01/rmuc/2023-08-30-17-06-39-image.png" alt></p><p><img src="/2023/08/01/rmuc/2023-08-30-17-06-49-image.png" alt></p><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p>由于传感器离柔光板很近，且发射的激光为圆锥形，有几率发射到柔光板上反射到传感器上，实际机械尺寸设计时得留一定的空间。</p><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>实际测试时该激光测距传感器采样率很低，弹丸速度很快，传感器完全无法检测到弹丸，该方案废弃。</p><h3 id="红外屏"><a href="#红外屏" class="headerlink" title="红外屏"></a>红外屏</h3><p>当前的方法是红外屏，但红外屏采样率也有限，基本检测到的击打都为反弹，若反弹速度太快则会检测不到。实际安装位置需要测试，淘宝有现成产品</p><p><img src="/2023/08/01/rmuc/963efc11b6b25588cb33e4742afb66594408431d.png" alt></p><p>或365元定制尺寸，正方形。有串口，可二次开发</p><p><img src="/2023/08/01/rmuc/2023-08-30-17-14-10-image.png" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;装甲板复现&quot;&gt;&lt;a href=&quot;#装甲板复现&quot; class=&quot;headerlink&quot; title=&quot;装甲板复现&quot;&gt;&lt;/a&gt;装甲板复现&lt;/h2&gt;&lt;p&gt;由于规则的修改，现在击打能量机关的装甲板改为圆形，对击打的环数进行判断，越准越高分，所以我们打算对其进行复现&lt;/p&gt;</summary>
      
    
    
    
    <category term="硬件" scheme="https://jameshoi.github.io/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="硬件" scheme="https://jameshoi.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="Robomaster" scheme="https://jameshoi.github.io/tags/Robomaster/"/>
    
  </entry>
  
  <entry>
    <title>一些软件推荐&amp;随记</title>
    <link href="https://jameshoi.github.io/2023/08/01/software/"/>
    <id>https://jameshoi.github.io/2023/08/01/software/</id>
    <published>2023-08-01T07:51:17.000Z</published>
    <updated>2023-08-12T09:40:38.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h1><h2 id="wox"><a href="#wox" class="headerlink" title="wox"></a>wox</h2><p>快捷键+everything搜索+拼音+缩写功能，很方便</p><p><img src="/2023/08/01/software/2023-08-01-21-37-33-image.png" alt></p><h2 id="cmder"><a href="#cmder" class="headerlink" title="cmder"></a>cmder</h2><p>一个不错的终端软件，唯一的缺点就是启动速度有点慢，其次不知道为什么windowsTerminal没有识别cmder，网上说加入到path就行，下图是我手动配置的cmder</p><p><img src="/2023/08/01/software/2023-08-01-15-56-31-image.png" alt></p><p>设置后用快捷键可以方便打开终端，但是这个快捷键速度太慢了，参考<a href="https://superuser.com/questions/426947/slow-windows-desktop-keyboard-shortcuts">slow windows desktop keyboard shortcuts - Super User</a>，杀掉这个进程确实可以令这个快捷键更快，但是所有的uwp软件将会被杀死</p><p><img src="/2023/08/01/software/2023-08-01-15-54-57-image.png" alt></p><p><img src="/2023/08/01/software/2023-08-01-16-08-52-image.png" alt></p><p>最后还是用autohotkey解决了，自己写个小脚本自启动就行</p><h2 id="Vimium-C"><a href="#Vimium-C" class="headerlink" title="Vimium C"></a>Vimium C</h2><p><img src="/2023/08/01/software/2023-08-01-21-38-52-image.png" alt></p><p>国人用vimium改的，操作好很多，原本vimium不能用的搜索功能<code>/</code>能用了，但是相比surfingkeys的选择模式还是差点，但surfingkeys的jk上下移动有延迟，这点无法接受。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>有空想设计款方便操作windows文件夹的，例如说浏览器弹出窗口选择保存位置，希望能够完全脱离鼠标进行操作。</p><h2 id="VSCode-Vim"><a href="#VSCode-Vim" class="headerlink" title="VSCode Vim"></a>VSCode Vim</h2><p>最近在练vim，操作算是都熟悉了，但是就算用wbhjklf还是有点折磨人，发现了easymotion这个东西，vscode的vim选项直接打开就能用</p><p><img src="/2023/08/01/software/2023-08-01-22-52-40-image.png" alt></p><p>这个和vimium c的f键功能类似</p><p><img src="/2023/08/01/software/2023-08-01-23-34-21-image.png" alt></p><p>选择前</p><p><img src="/2023/08/01/software/2023-08-01-23-34-45-image.png" alt></p><p>选择后</p><p><img src="/2023/08/01/software/2023-08-01-23-34-55-image.png" alt></p><p>这段json加入到vscode的settings.json里可以令空格改为跳转到任意位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;vim.normalModeKeyBindingsNonRecursive&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;before&quot;</span>: [<span class="string">&quot; &quot;</span>],</span><br><span class="line">        <span class="attr">&quot;after&quot;</span>: [<span class="string">&quot;leader&quot;</span>, <span class="string">&quot;leader&quot;</span>, <span class="string">&quot;leader&quot;</span>, <span class="string">&quot;j&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line">&quot;vim.visualModeKeyBindingsNonRecursive&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;before&quot;</span>: [<span class="string">&quot; &quot;</span>],</span><br><span class="line">        <span class="attr">&quot;after&quot;</span>: [<span class="string">&quot;leader&quot;</span>, <span class="string">&quot;leader&quot;</span>, <span class="string">&quot;leader&quot;</span>, <span class="string">&quot;j&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="Vim一些高效的命令"><a href="#Vim一些高效的命令" class="headerlink" title="Vim一些高效的命令"></a>Vim一些高效的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">R 连续替换多个字符</span><br><span class="line">ci&quot; 将&quot;内的文字替换掉</span><br><span class="line">di&quot;</span><br><span class="line">yi&quot; 同理</span><br><span class="line">cs&quot;&#39; 将&quot;替换成&#39;（需要vim-surround插件）</span><br><span class="line">ca&quot;&#39; 将包括&quot;在内的替换</span><br><span class="line">viw 将这个词选中  </span><br><span class="line">S visual mode下将选中的框起（需要插件）</span><br><span class="line"></span><br><span class="line">d$ 删除光标之后当前行的内容</span><br><span class="line">d0 同理</span><br><span class="line">vii 选取当前缩进下的内容</span><br><span class="line">vai 选取当前缩进下包括上一级的上半部分</span><br><span class="line">vaI 选取当前缩进下包括上一级</span><br><span class="line"></span><br><span class="line">af 扩大block选取</span><br><span class="line">ap 选中</span><br><span class="line">gd 查看定义</span><br><span class="line">gh 等同鼠标放在单词上</span><br><span class="line">gcc 注释这行代码</span><br><span class="line">gc2j 注释两行代码</span><br><span class="line">dap 删除这个函数</span><br><span class="line">40gg 跳转到40行</span><br><span class="line">insert 模式下通过 ctrl+h ctrl+w ctrl+u 来删除前一个字符，前一个单词，前面一行所有字符</span><br></pre></td></tr></table></figure><h3 id="Normal-mode下拼音输入法需要频繁切换"><a href="#Normal-mode下拼音输入法需要频繁切换" class="headerlink" title="Normal mode下拼音输入法需要频繁切换"></a>Normal mode下拼音输入法需要频繁切换</h3><p><a href="https://github.com/daipeihust/im-select/blob/master/README_CN.md">https://github.com/daipeihust/im-select/blob/master/README_CN.md</a><br>在vscode里设置一下可以令normal mode输入法默认为英文</p><h2 id="geoip"><a href="#geoip" class="headerlink" title="geoip"></a>geoip</h2><p>写了个玩具，主要用来查找域名指向的ip的地理位置，有时候下载速度慢的时候需要查一下，从而调整节点。</p><p><a href="https://github.com/JamesHoi/geoip">GitHub - JamesHoi/geoip: A toy for check domain location</a></p><h2 id="KeePassXC"><a href="#KeePassXC" class="headerlink" title="KeePassXC"></a>KeePassXC</h2><p>一款保存密码的软件，开源，我发现我也没什么东西需要保存密码，所以约等于是个本地的密码生成器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件推荐&quot;&gt;&lt;a href=&quot;#软件推荐&quot; class=&quot;headerlink&quot; title=&quot;软件推荐&quot;&gt;&lt;/a&gt;软件推荐&lt;/h1&gt;&lt;h2 id=&quot;wox&quot;&gt;&lt;a href=&quot;#wox&quot; class=&quot;headerlink&quot; title=&quot;wox&quot;&gt;&lt;/a&gt;wo</summary>
      
    
    
    
    <category term="杂项" scheme="https://jameshoi.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="软件" scheme="https://jameshoi.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>记录一下折腾小米盒子</title>
    <link href="https://jameshoi.github.io/2022/08/04/mibox2/"/>
    <id>https://jameshoi.github.io/2022/08/04/mibox2/</id>
    <published>2022-08-04T07:04:17.000Z</published>
    <updated>2022-08-04T07:34:55.557Z</updated>
    
    <content type="html"><![CDATA[<p>家里的小米盒子是二代的，想解决看剧麻烦和广告的问题，关键是安卓系统还是4.4，好多软件不能装，网上的办法也不全，这里记录一下我自己的解决办法。</p><h1 id="ROOT"><a href="#ROOT" class="headerlink" title="ROOT"></a>ROOT</h1><p>对小米盒子进行一些操作时，难免会有权限问题，网上下个kingoroot，一键root，很快。成功后 <code>adb shell</code>并输入su命令即可进入root用户。<a href="KingoRoot.apk">kingroot.apk</a></p><h1 id="禁用小米自带软件"><a href="#禁用小米自带软件" class="headerlink" title="禁用小米自带软件"></a>禁用小米自带软件</h1><p>网上一堆带有—user 0的办法，但貌似安卓4.4不支持，好在网上找到了办法，用 <code>pm block &lt;package&gt;</code>的办法，软件稍微有点多，所以随手写了个py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;com.xiaomi.mitv.appstore&quot;</span>,<span class="string">&quot;com.xiaomi.mitv.shop&quot;</span>,<span class="string">&quot;com.xiaomi.miplay&quot;</span>,<span class="string">&quot;com.duokan.airkan.tvbox&quot;</span>,<span class="string">&quot;com.xiaomi.tweather&quot;</span>,</span><br><span class="line">    <span class="string">&quot;com.xiaomi.tv.gallery&quot;</span>,<span class="string">&quot;com.mitv.shoplugin&quot;</span>,<span class="string">&quot;com.xiaomi.smarthome.tv&quot;</span>,<span class="string">&quot;com.xiaomi.mitv.payment&quot;</span>,<span class="string">&quot;com.xiaomi.mitv.advertise&quot;</span>,</span><br><span class="line">    <span class="string">&quot;com.mitv.tvhome&quot;</span>,<span class="string">&quot;com.mitv.gallery&quot;</span>]</span><br><span class="line">ip = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;taskkill /f /t /im adb.exe&quot;</span>)</span><br><span class="line">os.system(<span class="string">&quot;adb connect &quot;</span>+ip)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    os.system(<span class="string">&quot;adb shell pm uninstall &quot;</span>+i+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;adb shell pm block &quot;</span>+i+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Kodi"><a href="#Kodi" class="headerlink" title="Kodi"></a>Kodi</h1><p>kodi就不介绍了，但是在安卓4.4得安装特别版本的kodi <a href="kodi.apk">kodi.apk</a></p><h1 id="SmartTube"><a href="#SmartTube" class="headerlink" title="SmartTube"></a>SmartTube</h1><p>无广告YouTube，特别好用，不多介绍，自行去官网下载，开源项目<a href="https://github.com/yuliskov/SmartTubeNext">SmartTubeNext</a></p><h1 id="无广告桌面"><a href="#无广告桌面" class="headerlink" title="无广告桌面"></a>无广告桌面</h1><p>这支持安卓4.4的桌面可真不好找，最后用的<a href="HALauncher_2.0.2.1.apk">HALauncher_2.0.2.1</a>，效果如图，可以自定义固定什么应用。</p><p><img src="/2022/08/04/mibox2/image-20220804144434969.png" alt="image-20220804144434969"></p><h1 id="自定义开机自启动"><a href="#自定义开机自启动" class="headerlink" title="自定义开机自启动"></a>自定义开机自启动</h1><p>这一步属于是搞了半天，小米盒子系统下没有vim，传文件和复制代码弄起来很费劲。最终解决的方法如下：</p><ol><li>由于要修改 <code>/system</code>目录下的文件，先在root用户下执行 <code>mount -o rw,remount /system</code>指令。</li><li>在 <code>/system/etc</code>目录下新建install-recovery-2.sh，根据网上查的资料，install-recovery是在boot阶段的代码，可见此时很多应用或者服务还没启动，所以我写了个当小米桌面启动后启动我的应用的脚本。install-recovery-2.sh文件代码如下，其中monkey命令是真好用，不需要去查软件的activity是什么，<code>settings put global adb_enabled 1</code>为开启adb。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/system/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">#!/system/bin/sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">my_p=com.mitv.tvhome</span></span><br><span class="line"><span class="string">while [ $( pgrep -f $my_p | wc -l ) -eq 0 ]</span></span><br><span class="line"><span class="string">do</span></span><br><span class="line"><span class="string">    sleep 1</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string">sleep 4</span></span><br><span class="line"><span class="string">settings put global adb_enabled 1</span></span><br><span class="line"><span class="string">monkey -p net.i.akihiro.halauncher -c android.intent.category.LAUNCHER 1</span></span><br><span class="line"><span class="string">&#x27;</span> &gt; /data/init.sh</span><br><span class="line"></span><br><span class="line">/data/init.sh &amp;</span><br></pre></td></tr></table></figure><p>不会用echo方法写入文件的，就先用adb复制进去，再操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb push install-recovery-2.sh /data/<span class="built_in">local</span>/tmp</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">mount -o rw,remount /system</span><br><span class="line">cp /data/<span class="built_in">local</span>/tmp/install-recovery-2.sh /system/etc/</span><br></pre></td></tr></table></figure><p>最终效果特别好，小米盒子启动的icntv图标消失后，立刻就进入了HALauncher，如有需要开机自启动kodi之类的，可行修改代码。</p><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>有试过在盒子上装软件，但clash不支持安卓4.4，ssr不稳定。最终解决方法是用家里的电脑的clash，再局域网挂代理。PS：我其实不知道settings有没有https_proxy这个，反正最后是没什么问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy 192.168.1.106:7890</span><br><span class="line">adb shell settings put global https_proxy 192.168.1.106:7890</span><br></pre></td></tr></table></figure><p>若要取消代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy :0 </span><br><span class="line">adb shell settings put global https_proxy :0 </span><br></pre></td></tr></table></figure><p>注意记得路由器上设置一下mac绑ip，避免代理ip被更改</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li>想用adb进行操作，参考<a href="https://stackoverflow.com/questions/7789826/adb-shell-input-events">这个</a>。若要输入中文，用<a href="https://github.com/senzhk/ADBKeyBoard">ADBKeyBoard</a></li><li>想要把文件从小米盒子系统里复制出来，参考下图，实测有效。<a href="https://android.stackexchange.com/questions/85564/need-one-line-adb-shell-su-push-pull-to-access-data-from-windows-batch-file">原文链接</a></li></ol><p><img src="/2022/08/04/mibox2/image-20220804151403110.png" alt="image-20220804151403110"></p><ol><li>建议还是不要操作 <code>/system/app</code>路径，删除或添加都有可能令盒子变砖，或卡死在icntv图标上</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;家里的小米盒子是二代的，想解决看剧麻烦和广告的问题，关键是安卓系统还是4.4，好多软件不能装，网上的办法也不全，这里记录一下我自己的解决办法。&lt;/p&gt;
&lt;h1 id=&quot;ROOT&quot;&gt;&lt;a href=&quot;#ROOT&quot; class=&quot;headerlink&quot; title=&quot;ROOT&quot;</summary>
      
    
    
    
    <category term="杂项" scheme="https://jameshoi.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="安卓" scheme="https://jameshoi.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="小米盒子" scheme="https://jameshoi.github.io/tags/%E5%B0%8F%E7%B1%B3%E7%9B%92%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>绕过某监考客户端检测</title>
    <link href="https://jameshoi.github.io/2022/06/30/invigilate/"/>
    <id>https://jameshoi.github.io/2022/06/30/invigilate/</id>
    <published>2022-06-30T04:54:17.000Z</published>
    <updated>2022-07-04T09:51:52.427Z</updated>
    
    <content type="html"><![CDATA[<p>现在的开发人员安全意识还是薄弱，用c#写的还就加了一点点混淆。本文章分两部分，一是开启软件时的校验，二是绕过软件检测系统。<strong>重点强调！！！本文章只限于交流逆向技术用途，不提供成品下载！！</strong></p><h2 id="文件校验"><a href="#文件校验" class="headerlink" title="文件校验"></a>文件校验</h2><p>在加载的时候按暂停，很容易能找到检查软件版本的位置</p><p><img src="/2022/06/30/invigilate/image-20220630012927916.png" alt="image-20220630012927916"></p><p>很明显是验证版本</p><p><img src="/2022/06/30/invigilate/image-20220630013849100.png" alt="image-20220630013849100"></p><p>跟下去之后很容易找到校验位置，应该是一个任务组，运行其中一个任务</p><p><img src="/2022/06/30/invigilate/image-20220630014033290.png" alt="image-20220630014033290"></p><p>一直跟下去，能找到这个线程组的线程函数，可以看到有校验的函数。补充一句，软件是若校验本地exe和dll与校验码不一致则重新下载</p><p><img src="/2022/06/30/invigilate/image-20220630015841487.png" alt="image-20220630015841487"></p><p>这里不再阐述如何修改，直接修改c# IL为Nop即可，上图最后有个needRestart，意思是更新软件重启，可见需要直接return，满足那个if条件。</p><p><img src="/2022/06/30/invigilate/image-20220630015943782.png" alt="image-20220630015943782"></p><p>修改后变这样，用dnspy保存即可</p><p><img src="/2022/06/30/invigilate/image-20220630020159471.png" alt="image-20220630020159471"></p><h2 id="检测系统"><a href="#检测系统" class="headerlink" title="检测系统"></a>检测系统</h2><p>当开着有通讯软件时会报错，显示要求关闭，甚至会发现是虚拟机，远程桌面等。</p><p><img src="/2022/06/30/invigilate/image-20220630020422779.png" alt="image-20220630020422779"></p><p><img src="/2022/06/30/invigilate/image-20220630020552928.png" alt="image-20220630020552928"></p><p>当显示提示的时候dnspy点暂停，很容易能找到相关位置</p><p><img src="/2022/06/30/invigilate/image-20220630020805763.png" alt="image-20220630020805763"></p><p>都叫monitorSystem了，明显A是检测函数，nop掉即可</p><p><img src="/2022/06/30/invigilate/image-20220630021037756.png" alt="image-20220630021037756"></p><h2 id="继续分析"><a href="#继续分析" class="headerlink" title="继续分析"></a>继续分析</h2><p>前面两部分其实已经够了，这里再分析一下流程，先获取了学生信息，videoMnager打开摄像头，连接一个鼠标按下的event</p><p><img src="/2022/06/30/invigilate/image-20220630025253191.png" alt="image-20220630025253191"></p><p>下图a函数应该是截图，查看电脑当前屏幕，有机会上传，另外那个B函数有机会是上传系统环境进程，这里调试不了，可能需要实际考试产能进入这个函数。</p><p><img src="/2022/06/30/invigilate/image-20220630034935539.png" alt="image-20220630034935539"></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>可以看到打开qq，甚至是虚拟机的情况下都能正常运行。这里没有继续分析监考客户端是否有其他监控过程，所以就算你一意孤行打算作弊，也请你也自行斟酌带来的风险和后果。有时间研究逆向破解监考客户端，不如多花些时间学习！</p><p><img src="/2022/06/30/invigilate/image-20220630021423710.png" alt="image-20220630021423710"></p><p><img src="/2022/06/30/invigilate/image-20220630035357799.png" alt="image-20220630035357799"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在的开发人员安全意识还是薄弱，用c#写的还就加了一点点混淆。本文章分两部分，一是开启软件时的校验，二是绕过软件检测系统。&lt;strong&gt;重点强调！！！本文章只限于交流逆向技术用途，不提供成品下载！！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件校验&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="逆向学习" scheme="https://jameshoi.github.io/categories/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="破解" scheme="https://jameshoi.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>TSCTF 2022 校内赛 逆向部分</title>
    <link href="https://jameshoi.github.io/2022/04/24/tsctf-2022-re/"/>
    <id>https://jameshoi.github.io/2022/04/24/tsctf-2022-re/</id>
    <published>2022-04-24T14:18:00.000Z</published>
    <updated>2022-04-24T14:18:53.572Z</updated>
    
    <content type="html"><![CDATA[<p>感觉没人打比赛啊…都是自己人</p><h2 id="happy-mota"><a href="#happy-mota" class="headerlink" title="happy_mota"></a>happy_mota</h2><p>main.exe可以得到一些信息，根据script文件夹下的解密运行一次得到三块flag</p><p><img src="/2022/04/24/tsctf-2022-re/image-20220424033856293.png" alt="image-20220424033856293"></p><p>根据提示看出11到19层的地图形状为字符，其中少了一层，根据后半flag猜测为Enjoy</p><p><img src="/2022/04/24/tsctf-2022-re/image-20220424034203991.png" alt="image-20220424034203991" style="zoom:33%;"><img src="/2022/04/24/tsctf-2022-re/image-20220424034218700.png" alt="image-20220424034218700" style="zoom:33%;"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;TSCTF&#123;Enj&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">f2 = <span class="string">b&#x27;\xf8\xb0\x95\xfc\x84\x88&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(f2)):</span><br><span class="line">    s += bytes([f2[i] ^ i ^ <span class="number">0xC8</span>])</span><br><span class="line">print(s.decode(),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">f3 = <span class="string">b&#x27;\xeb\xe7\x85\xe1\xd5\xc3\x87\xd6\x85\xdc\xd3\xda\x9e&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(f3)):</span><br><span class="line">    s += bytes([f3[i] ^ i ^ <span class="number">0xB4</span>])</span><br><span class="line">print(s.decode(),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">f4 = <span class="string">b&#x27;\xee\x97\xd4\xcc\xe7\x91\xf7\xd4\x92\xdc\xe3\xc5\xcb\xcf\x8a\xd5&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(f4)):</span><br><span class="line">    s += bytes([(f4[i] ^ (len(f4) - i) ^ <span class="number">0xA9</span>)])</span><br><span class="line">print(s.decode(),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="PatternLock"><a href="#PatternLock" class="headerlink" title="PatternLock"></a>PatternLock</h2><p>java绕了dex半天还是一样的，native JNI_Load异或后可以看出，大致猜是一个hook（没细看），异或一下即可。</p><p><img src="/2022/04/24/tsctf-2022-re/image-20220424034820662.png" alt="image-20220424034820662"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v9 = list(<span class="string">&#x27;cig`o&#x27;</span>)</span><br><span class="line">v11 = list(<span class="string">&#x27;(Mhbrd)kigm$_y|f~v):N&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>): v9[i] = chr(ord(v9[i])^i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>): v11[i] = chr(ord(v11[i])^i)</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(v9))</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(v11))</span><br><span class="line"></span><br><span class="line">data = [<span class="number">97</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">10</span>, <span class="number">68</span>, <span class="number">11</span>, <span class="number">86</span>, <span class="number">55</span>, <span class="number">91</span>, <span class="number">4</span>, <span class="number">42</span>, <span class="number">4</span>, <span class="number">76</span>, <span class="number">107</span>, <span class="number">89</span>, <span class="number">68</span>, <span class="number">32</span>, <span class="number">95</span>, <span class="number">77</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">55</span>, <span class="number">9</span>, <span class="number">86</span>, <span class="number">47</span>, <span class="number">87</span>, <span class="number">26</span>, <span class="number">109</span>, <span class="number">86</span>, <span class="number">68</span>, <span class="number">116</span>, <span class="number">11</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">54</span>, <span class="number">12</span>, <span class="number">87</span>, <span class="number">122</span>]</span><br><span class="line">cipher = list(<span class="string">&quot;TSCTF2022!!!!!&quot;</span>)</span><br><span class="line">enc = <span class="string">&quot;\r&lt;6\x12)G^VfIDjDX&quot;</span></span><br><span class="line">cipher = [ord(enc[i])^ord(cipher[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(cipher))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    print(chr(data[i]^cipher[i%len(cipher)]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="happy-string"><a href="#happy-string" class="headerlink" title="happy_string"></a>happy_string</h2><p>题目是linux下的smc，前面ptrace反调试，过掉就行。</p><p><img src="/2022/04/24/tsctf-2022-re/image-20220424035554644.png" alt="image-20220424035554644"></p><p>明显Tea，主程序用v2比较，而v2就算经过加密后也是不变的，用v2加密后的字节解密v1</p><p><img src="/2022/04/24/tsctf-2022-re/image-20220424035614646.png" alt="image-20220424035614646"></p><p>findcrypto显示blowfish，参考相关源码，没有sub_557DBE6B8493这一项</p><p><img src="/2022/04/24/tsctf-2022-re/image-20220424035742234.png" alt="image-20220424035742234"></p><p>sub_557DBE6B8B6B是blowfish_decrypt，而输入的key为W3lc0meT0TSCTF!!，对前面的v2进行加密。由于题目是动态flag，所以还是需要还原一次v2的加密过程，其中sub_557DBE6B8493直接复制粘贴伪代码即可。</p><p>my_blowfish脚本，库是<a href="https://github.com/Rupan/blowfish">https://github.com/Rupan/blowfish</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;blowfish.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> _DWORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> _BYTE;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_55640047F493</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>* a1, <span class="keyword">int</span> a2, _DWORD* a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>* v3; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>* v4; <span class="comment">// rax</span></span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>* v6; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">int</span> v7; <span class="comment">// [rsp+Ch] [rbp-3Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+24h] [rbp-24h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// [rsp+24h] [rbp-24h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// [rsp+28h] [rbp-20h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// [rsp+28h] [rbp-20h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// [rsp+28h] [rbp-20h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// [rsp+2Ch] [rbp-1Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v14; <span class="comment">// [rsp+2Ch] [rbp-1Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+30h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+30h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">int</span> v17; <span class="comment">// [rsp+34h] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">int</span> v18; <span class="comment">// [rsp+34h] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v19; <span class="comment">// [rsp+38h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v20; <span class="comment">// [rsp+38h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">int</span> v21; <span class="comment">// [rsp+38h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v22; <span class="comment">// [rsp+38h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v23; <span class="comment">// [rsp+3Ch] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v24; <span class="comment">// [rsp+3Ch] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v25; <span class="comment">// [rsp+3Ch] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v26; <span class="comment">// [rsp+3Ch] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v27; <span class="comment">// [rsp+40h] [rbp-8h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v28; <span class="comment">// [rsp+40h] [rbp-8h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v29; <span class="comment">// [rsp+40h] [rbp-8h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v30; <span class="comment">// [rsp+40h] [rbp-8h]</span></span><br><span class="line">    <span class="keyword">int</span> v31; <span class="comment">// [rsp+44h] [rbp-4h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v32; <span class="comment">// [rsp+44h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a2 &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a2 &lt; <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v21 = <span class="number">-1091581186</span>;</span><br><span class="line">            v25 = (<span class="number">0xBEEFCAFE</span> &gt;&gt; (<span class="number">4</span> * a3[<span class="number">3</span>])) ^ (<span class="number">0xBEEFCAFE</span> &gt;&gt; (<span class="number">6</span> * a3[<span class="number">2</span>])) ^ (<span class="number">-1091581186</span> &lt;&lt; (<span class="number">2</span> * a3[<span class="number">1</span>])) ^ (<span class="number">0xBEEFCAFE</span> &gt;&gt; (<span class="number">2</span> * *a3)) ^ <span class="number">0xF77E57F0</span>;</span><br><span class="line">            v29 = (<span class="number">0xBEEFCAFE</span> &gt;&gt; (<span class="number">4</span> * *((_BYTE*)a3 + <span class="number">12</span>))) ^ (v25 &gt;&gt; (<span class="number">6</span> * a3[<span class="number">2</span>])) ^ (<span class="number">-1091581186</span> &lt;&lt; (<span class="number">2</span> * a3[<span class="number">1</span>])) ^ (v25 &gt;&gt; (<span class="number">2</span> * *a3)) ^ (<span class="number">8</span> * v25);</span><br><span class="line">            v7 = -a2;</span><br><span class="line">            v18 = <span class="number">52</span> / -a2 + <span class="number">6</span>;</span><br><span class="line">            v14 = <span class="number">-559038737</span> * v18;</span><br><span class="line">            v9 = *a1;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                v22 = v21 ^ <span class="number">0xDEADBEEF</span>;</span><br><span class="line">                v26 = v25 ^ <span class="number">0xDEADBEEF</span>;</span><br><span class="line">                v30 = v29 ^ <span class="number">0xDEADBEEF</span>;</span><br><span class="line">                v32 = (v14 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">for</span> (i = v7 - <span class="number">1</span>; i; --i)</span><br><span class="line">                &#123;</span><br><span class="line">                    v11 = a1[i - <span class="number">1</span>];</span><br><span class="line">                    v26 |= v22;</span><br><span class="line">                    v30 = v26;</span><br><span class="line">                    v22 = v26;</span><br><span class="line">                    v6 = &amp;a1[i];</span><br><span class="line">                    *v6 -= ((v9 ^ v14) + (v11 ^ a3[v32 ^ i &amp; <span class="number">3</span>])) ^ (((<span class="number">4</span> * v9) ^ (v11 &gt;&gt; <span class="number">5</span>)) + ((v9 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v11)));</span><br><span class="line">                    v9 = *v6;</span><br><span class="line">                &#125;</span><br><span class="line">                v12 = a1[v7 - <span class="number">1</span>];</span><br><span class="line">                *a1 -= (((<span class="number">4</span> * v9) ^ (v12 &gt;&gt; <span class="number">5</span>)) + ((v9 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v12))) ^ ((v9 ^ v14) + (v12 ^ a3[v32]));</span><br><span class="line">                result = *a1;</span><br><span class="line">                v9 = *a1;</span><br><span class="line">                v21 = v22 + <span class="number">559038737</span>;</span><br><span class="line">                v25 = v26 + <span class="number">559038737</span>;</span><br><span class="line">                v29 = v30 + <span class="number">559038737</span>;</span><br><span class="line">                v14 += <span class="number">559038737</span>;</span><br><span class="line">                --v18;</span><br><span class="line">            &#125; <span class="keyword">while</span> (v18);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v19 = <span class="number">-889274641</span>;</span><br><span class="line">        v23 = (<span class="number">-889274641</span> &lt;&lt; (<span class="number">4</span> * a3[<span class="number">3</span>])) ^ (<span class="number">-889274641</span> &lt;&lt; (<span class="number">6</span> * a3[<span class="number">2</span>])) ^ (<span class="number">0xCAFEBEEF</span> &gt;&gt; (<span class="number">2</span> * a3[<span class="number">1</span>])) ^ (<span class="number">-889274641</span> &lt;&lt; (<span class="number">2</span> * *a3)) ^ <span class="number">0x195FD7DD</span>;</span><br><span class="line">        v27 = (<span class="number">-889274641</span> &lt;&lt; (<span class="number">4</span> * *((_BYTE*)a3 + <span class="number">12</span>))) ^ (v23 &lt;&lt; (<span class="number">6</span> * a3[<span class="number">2</span>])) ^ (<span class="number">0xCAFEBEEF</span> &gt;&gt; (<span class="number">2</span> * a3[<span class="number">1</span>])) ^ (v23 &lt;&lt; (<span class="number">2</span> * *a3)) ^ (v23 &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        v17 = <span class="number">52</span> / a2 + <span class="number">6</span>;</span><br><span class="line">        v13 = <span class="number">0</span>;</span><br><span class="line">        v10 = a1[a2 - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v13 -= <span class="number">559038737</span>;</span><br><span class="line">            v20 = v19 - <span class="number">559038737</span>;</span><br><span class="line">            v24 = v23 - <span class="number">559038737</span>;</span><br><span class="line">            v28 = v27 - <span class="number">559038737</span>;</span><br><span class="line">            v31 = (v13 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; a2 - <span class="number">1</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                v8 = a1[j + <span class="number">1</span>];</span><br><span class="line">                v24 |= v20;</span><br><span class="line">                v28 = v24;</span><br><span class="line">                v20 = v24;</span><br><span class="line">                v3 = &amp;a1[j];</span><br><span class="line">                *v3 += ((v8 ^ v13) + (v10 ^ a3[v31 ^ j &amp; <span class="number">3</span>])) ^ (((<span class="number">4</span> * v8) ^ (v10 &gt;&gt; <span class="number">5</span>)) + ((v8 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v10)));</span><br><span class="line">                v10 = *v3;</span><br><span class="line">            &#125;</span><br><span class="line">            v19 = v20 ^ <span class="number">0xDEADBEEF</span>;</span><br><span class="line">            v23 = v24 ^ <span class="number">0xDEADBEEF</span>;</span><br><span class="line">            v27 = v28 ^ <span class="number">0xDEADBEEF</span>;</span><br><span class="line">            v4 = &amp;a1[a2 - <span class="number">1</span>];</span><br><span class="line">            *v4 += ((*a1 ^ v13) + (v10 ^ a3[v31 ^ j &amp; <span class="number">3</span>])) ^ (((<span class="number">4</span> * *a1) ^ (v10 &gt;&gt; <span class="number">5</span>)) + ((*a1 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v10)));</span><br><span class="line">            result = *v4;</span><br><span class="line">            v10 = result;</span><br><span class="line">            --v17;</span><br><span class="line">        &#125; <span class="keyword">while</span> (v17);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> L[] = &#123; <span class="number">0x5E430F45</span>, <span class="number">0x704A90BA</span>&#125;;</span><br><span class="line">  scanf_s(<span class="string">&quot;%x %x&quot;</span>,&amp;L[<span class="number">0</span>],&amp;L[<span class="number">1</span>]);</span><br><span class="line">  BLOWFISH_CTX ctx;</span><br><span class="line"></span><br><span class="line">  sub_55640047F493(&amp;L, <span class="number">0xFFFFFFFE</span>, (_DWORD*)<span class="string">&quot;W3lc0meT0TSCTF!!&quot;</span>);</span><br><span class="line">  Blowfish_Init (&amp;ctx, (<span class="keyword">uint8_t</span> *)<span class="string">&quot;W3lc0meT0TSCTF!!&quot;</span>, <span class="number">16</span>);</span><br><span class="line">  Blowfish_Decrypt(&amp;ctx, &amp;L[<span class="number">0</span>], &amp;L[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%08lX %08lX\n&quot;</span>, (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)L[<span class="number">0</span>], (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)L[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态flag，相关脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">src = [ord(s) for s in &quot;frYVQ)VtT5cctvhM&quot;]</span></span><br><span class="line"><span class="string">text = &quot;13m0nAde i5 mes5ing arounD saf3 and s0und.Please d0 not tell Ver 0v0! I will show you the Key to decrypt sth!&quot;</span></span><br><span class="line"><span class="string">for i in range(16):</span></span><br><span class="line"><span class="string">    src[i] ^= ord(text[5*i])</span></span><br><span class="line"><span class="string">src = &quot;&quot;.join([chr(s) for s in src])</span></span><br><span class="line"><span class="string">print(src)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&#x27;10.7.2.136&#x27;</span>,<span class="number">45530</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byteArr2intArr</span>(<span class="params">data,order=<span class="string">&#x27;little&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> [int.from_bytes(data[i:i+<span class="number">4</span>],byteorder=order) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(data),<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intArr2byteArr</span>(<span class="params">data,order=<span class="string">&#x27;little&#x27;</span></span>):</span></span><br><span class="line">    out = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> data: out += s.to_bytes(<span class="number">4</span>,order) </span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]; v1 = v[<span class="number">1</span>]</span><br><span class="line">    k0 = k[<span class="number">0</span>]; k1 = k[<span class="number">1</span>]; k2 = k[<span class="number">2</span>]; k3 = k[<span class="number">3</span>]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    delta = <span class="number">0x21524111</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        x -= delta; x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1); v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3); v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = v[<span class="number">0</span>]; v1 = v[<span class="number">1</span>]</span><br><span class="line">    k0 = k[<span class="number">0</span>]; k1 = k[<span class="number">1</span>]; k2 = k[<span class="number">2</span>]; k3 = k[<span class="number">3</span>]</span><br><span class="line">    x = <span class="number">0xD5B7DDE0</span></span><br><span class="line">    delta = <span class="number">0x21524111</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3); v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1); v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        x += delta; x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    v[<span class="number">0</span>] = v0</span><br><span class="line">    v[<span class="number">1</span>] = v1</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_once</span>(<span class="params">i</span>):</span></span><br><span class="line">    elf_name = <span class="string">&#x27;tmp%d.elf&#x27;</span>%i</span><br><span class="line">    feedback = conn.recvline()</span><br><span class="line">    filedata = base64.b64decode(feedback.decode())</span><br><span class="line">    <span class="keyword">with</span> open(elf_name,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f: f.write(filedata)</span><br><span class="line">    conn.recvuntil(<span class="string">b&#x27;&gt;NOW? Show me Your Answer!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    e=ELF(<span class="string">&#x27;./%s&#x27;</span>%elf_name)</span><br><span class="line">    tmp = e.read(<span class="number">0x2040B8</span>,<span class="number">8</span>)</span><br><span class="line">    elf_key = hex(int.from_bytes(tmp,<span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    ret = subprocess.Popen(</span><br><span class="line">            <span class="string">&quot;my_blowfish.exe&quot;</span>,</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stdin=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">        )</span><br><span class="line">    ret.stdin.write((<span class="string">&quot;%s %s\n&quot;</span>%(elf_key[<span class="number">10</span>:],elf_key[<span class="number">2</span>:<span class="number">10</span>])).encode())</span><br><span class="line">    ret.stdin.flush()</span><br><span class="line">    result = ret.stdout.readline().decode()</span><br><span class="line">    blow_key = eval(<span class="string">&quot;0x%s%s&quot;</span>%(result[<span class="number">9</span>:<span class="number">17</span>],result[:<span class="number">8</span>]))</span><br><span class="line">    enc = byteArr2intArr(blow_key.to_bytes(<span class="number">8</span>,byteorder=<span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    key = byteArr2intArr(<span class="string">b&#x27;W3lc0meT0TSCTF!!&#x27;</span>)</span><br><span class="line">    flag = intArr2byteArr(decrypt(enc,key))</span><br><span class="line">    conn.sendline(flag)</span><br><span class="line"></span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;&gt;Ready to recv(Y|N)?\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">conn.sendline(<span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line">solve_once(<span class="number">1</span>)</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;&gt;GREAT!!! very interesting,Here&#x27;s Your Half flag:\&quot;TSCTF&#123;ug1y&amp;13OriNg_En\&quot; But I still want one more!\n&quot;</span>)</span><br><span class="line">solve_once(<span class="number">2</span>)</span><br><span class="line">conn.interactive()</span><br><span class="line"><span class="comment"># TSCTF&#123;ug1y&amp;13OriNg_EncD3c_Ich0OseEmu1t@v@&#125;</span></span><br></pre></td></tr></table></figure><h2 id="digdig"><a href="#digdig" class="headerlink" title="digdig"></a>digdig</h2><p>go语言，一堆digdig_tree函数，正确会输出right，前面main_convert将输入的字符串转为二进制，每个digdig_tree函数会判断一个比特，从而跳转完成二叉树跳转。写个脚本建立二叉树，再找到遍历找到输出right的地方，利用输出right的节点的父节点向上，再判断每一位应当是0或1即可还原flag。</p><p>idapython脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_name</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> ida_kernwin</span><br><span class="line"><span class="keyword">import</span> ida_idp</span><br><span class="line"><span class="keyword">import</span> ida_funcs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">&quot;graph.dot&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">file.write(<span class="string">&quot;digraph R &#123;\n&quot;</span>)</span><br><span class="line">end = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,elem,parent</span>):</span></span><br><span class="line">        self.addr = elem</span><br><span class="line">        self.parent = parent</span><br><span class="line">        self.l = <span class="literal">None</span></span><br><span class="line">        self.r = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sub_fun</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="keyword">global</span> all_fun</span><br><span class="line">    dism_addr = list(idautils.FuncItems(addr))</span><br><span class="line">    xref_froms = []</span><br><span class="line">    right = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> ea <span class="keyword">in</span> dism_addr:</span><br><span class="line">        asm = idc.GetDisasm(ea)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;wrong&quot;</span> <span class="keyword">in</span> asm <span class="keyword">and</span> <span class="string">&quot;lea&quot;</span> <span class="keyword">in</span> asm: right &amp;= <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> ida_idp.is_call_insn(ea) <span class="keyword">is</span> <span class="literal">False</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            callee = get_first_fcref_from(ea)</span><br><span class="line">            <span class="keyword">if</span> callee != addr <span class="keyword">and</span> callee <span class="keyword">not</span> <span class="keyword">in</span> all_fun: </span><br><span class="line">                name = ida_funcs.get_func_name(callee).replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line">                root_name = ida_funcs.get_func_name(addr).replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;Exit&quot;</span> <span class="keyword">in</span> name: xref_froms.append(int(right))</span><br><span class="line">                <span class="keyword">elif</span> name == <span class="string">&quot;fmt_Fprintln&quot;</span>: xref_froms.append(int(right))</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;digdig_tree&quot;</span> <span class="keyword">in</span> name <span class="keyword">and</span> <span class="string">&quot;wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">                    xref_froms.append(callee)</span><br><span class="line">                    file.write(<span class="string">&quot;  %s-&gt;%s\n&quot;</span>%(root_name,name))</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;wrong&quot;</span> <span class="keyword">in</span> name: <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">&quot;runtime&quot;</span> <span class="keyword">in</span> name: <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>: print(name)</span><br><span class="line"></span><br><span class="line">    xref_froms = list(set(xref_froms))</span><br><span class="line">    <span class="keyword">return</span> xref_froms</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_graph</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> all_fun</span><br><span class="line">    fun = get_sub_fun(n.addr)</span><br><span class="line">    <span class="keyword">if</span> len(fun)&gt;<span class="number">2</span>: </span><br><span class="line">        n.l = Node(fun[<span class="number">0</span>],n); n.r = Node(fun[<span class="number">1</span>],n)</span><br><span class="line">    <span class="keyword">elif</span> len(fun)==<span class="number">2</span>:</span><br><span class="line">        n.l = Node(fun[<span class="number">0</span>],n); n.r = Node(fun[<span class="number">1</span>],n)</span><br><span class="line">    <span class="keyword">elif</span> len(fun)==<span class="number">1</span>: n.l = Node(fun[<span class="number">0</span>],n)</span><br><span class="line">    all_fun.extend(fun)</span><br><span class="line">    all_fun = list(set(all_fun))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n.l != <span class="literal">None</span> <span class="keyword">and</span> n.l != <span class="number">0</span> <span class="keyword">and</span> n.l != <span class="number">1</span>: loop_graph(n.l)</span><br><span class="line">    <span class="keyword">if</span> n.r != <span class="literal">None</span> <span class="keyword">and</span> n.r != <span class="number">0</span> <span class="keyword">and</span> n.l != <span class="number">1</span>: loop_graph(n.r)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">root: Node</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">node</span>):</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>: <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">if</span> node.addr == <span class="number">1</span>: res.append(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            helper(node.l)</span><br><span class="line">            helper(node.r)</span><br><span class="line">    helper(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">flag_bit = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_parent</span>(<span class="params">n: Node,child_name</span>):</span></span><br><span class="line">    <span class="keyword">global</span> flag_bit</span><br><span class="line">    <span class="keyword">if</span> n == <span class="literal">None</span>: <span class="keyword">return</span></span><br><span class="line">    dism_addr = list(idautils.FuncItems(n.addr))</span><br><span class="line">    name = ida_funcs.get_func_name(n.addr).replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> child_name != <span class="string">&quot;fmt_Fprintln&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> ea <span class="keyword">in</span> dism_addr:</span><br><span class="line">            <span class="keyword">if</span> ida_idp.is_call_insn(ea) <span class="keyword">is</span> <span class="literal">False</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                callee = get_first_fcref_from(ea)</span><br><span class="line">                tmp = ida_funcs.get_func_name(callee).replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;wrong&quot;</span> <span class="keyword">in</span> tmp: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;digdig_tree&quot;</span> <span class="keyword">in</span> tmp:</span><br><span class="line">                    flag_bit = str(int(tmp==child_name))+flag_bit</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    get_parent(n.parent,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_fun = []</span><br><span class="line">addr = <span class="number">0x49B7E0</span> <span class="comment"># digdig_tree.AztyfJahWAIYmgn</span></span><br><span class="line">n = loop_graph(Node(addr,<span class="literal">None</span>))</span><br><span class="line">res = preorderTraversal(n)</span><br><span class="line">get_parent(res[<span class="number">0</span>].parent,<span class="string">&quot;fmt_Fprintln&quot;</span>)</span><br><span class="line">flag = [chr(int(flag_bit[i:i+<span class="number">8</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(flag_bit),<span class="number">8</span>)]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">file.write(<span class="string">&quot;&#125;\n&quot;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感觉没人打比赛啊…都是自己人&lt;/p&gt;
&lt;h2 id=&quot;happy-mota&quot;&gt;&lt;a href=&quot;#happy-mota&quot; class=&quot;headerlink&quot; title=&quot;happy_mota&quot;&gt;&lt;/a&gt;happy_mota&lt;/h2&gt;&lt;p&gt;main.exe可以得到一些信息</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="安卓" scheme="https://jameshoi.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>一些常见的加密算法</title>
    <link href="https://jameshoi.github.io/2022/01/11/crypto/"/>
    <id>https://jameshoi.github.io/2022/01/11/crypto/</id>
    <published>2022-01-10T18:34:17.000Z</published>
    <updated>2023-08-01T15:56:28.711Z</updated>
    
    <content type="html"><![CDATA[<p>2023记：之前想着每种加密算法都复现一次，并总结每种的特征，这坑有空再填吧</p><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><h2 id="RC5"><a href="#RC5" class="headerlink" title="RC5"></a>RC5</h2><h2 id="RC6"><a href="#RC6" class="headerlink" title="RC6"></a>RC6</h2><h2 id="TEA-XTEA-XXTEA"><a href="#TEA-XTEA-XXTEA" class="headerlink" title="TEA/XTEA/XXTEA"></a>TEA/XTEA/XXTEA</h2><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><h2 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h2><h2 id="Salsa20"><a href="#Salsa20" class="headerlink" title="Salsa20"></a>Salsa20</h2><h2 id="chacha20"><a href="#chacha20" class="headerlink" title="chacha20"></a>chacha20</h2><h2 id="Blowfish"><a href="#Blowfish" class="headerlink" title="Blowfish"></a>Blowfish</h2><h2 id="TwoFish"><a href="#TwoFish" class="headerlink" title="TwoFish"></a>TwoFish</h2><h2 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h2><h2 id="ZUC"><a href="#ZUC" class="headerlink" title="ZUC"></a>ZUC</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2023记：之前想着每种加密算法都复现一次，并总结每种的特征，这坑有空再填吧&lt;/p&gt;
&lt;h2 id=&quot;RC4&quot;&gt;&lt;a href=&quot;#RC4&quot; class=&quot;headerlink&quot; title=&quot;RC4&quot;&gt;&lt;/a&gt;RC4&lt;/h2&gt;&lt;h2 id=&quot;RC5&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="逆向学习" scheme="https://jameshoi.github.io/categories/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="加密算法" scheme="https://jameshoi.github.io/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MRCTF 2021 逆向题目</title>
    <link href="https://jameshoi.github.io/2022/01/11/mrctf-2021-re/"/>
    <id>https://jameshoi.github.io/2022/01/11/mrctf-2021-re/</id>
    <published>2022-01-10T18:34:17.000Z</published>
    <updated>2022-01-10T19:07:07.792Z</updated>
    
    <content type="html"><![CDATA[<p>开个坑，有空复现一下，先复现安卓题目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开个坑，有空复现一下，先复现安卓题目&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>近期做过的一些题目</title>
    <link href="https://jameshoi.github.io/2022/01/11/note2/"/>
    <id>https://jameshoi.github.io/2022/01/11/note2/</id>
    <published>2022-01-10T18:34:17.000Z</published>
    <updated>2022-01-10T18:56:18.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="近期做过的一些题目"><a href="#近期做过的一些题目" class="headerlink" title="近期做过的一些题目"></a>近期做过的一些题目</h1><p>学业&amp;机器人挺忙的，逆向做一题就很耗时间，实在是不太有时间认真做题，准备直接找一堆wp复现一遍</p><h2 id="湖湘杯-Hideit-Hideit"><a href="#湖湘杯-Hideit-Hideit" class="headerlink" title="湖湘杯 Hideit Hideit"></a>湖湘杯 Hideit <a href="Hideit.zip">Hideit</a></h2><p>进程序大致能找到这个函数</p><p><img src="/2022/01/11/note2/image-20220111010145631.png" alt="image-20220111010145631"></p><p>能看出是向进程内存注入了一个函数，然后根据内存地址调用该函数，断点进入函数，一直跟进去，会发现TestEv1l.dll已注入，具体注入流程尚未分析。</p><p><img src="/2022/01/11/note2/image-20220111012146523.png" alt="image-20220111012146523"></p><p>找到加密函数，开头有个修改注册表函数，隐藏了key</p><p><img src="/2022/01/11/note2/image-20220111012911648.png" alt="image-20220111012911648"></p><p><img src="/2022/01/11/note2/image-20220111013550525.png" alt="image-20220111013550525"></p><p>进一步分析发现先做了一次xxtea，需要令v12这个输入值正确，成功进入if后再进行一次加密，然后最后再判断是否一致</p><p><img src="/2022/01/11/note2/image-20220111013704574.png" alt="image-20220111013704574"></p><p>xtea解密，解密得到第一个密匙为dotitsit</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>* v, <span class="keyword">int</span>* k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], i;           <span class="comment">/* set up */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sum = <span class="number">0xC6EF3720</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delta = <span class="number">0x61C88647</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">index = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">v1 -= ((sum ^ v0) + (v0 ^ k[index ^ <span class="number">1</span>])) ^ (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">3</span>)) + ((v0 &gt;&gt; <span class="number">5</span>) ^ (v0 &lt;&lt; <span class="number">2</span>)));</span><br><span class="line">v0 -= ((sum ^ v1) + (v1 ^ k[index])) ^ (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">3</span>)) + ((v1 &gt;&gt; <span class="number">5</span>) ^ (v1 &lt;&lt; <span class="number">2</span>)));</span><br><span class="line">sum += delta;</span><br><span class="line">&#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key[<span class="number">4</span>] = &#123; <span class="number">114</span>, <span class="number">514</span>, <span class="number">19</span>, <span class="number">19</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v[<span class="number">2</span>] = &#123; <span class="number">288407067</span>,<span class="number">1668576323</span> &#125;;</span><br><span class="line">decrypt((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)v, key);</span><br><span class="line"><span class="keyword">char</span>* ptr = (<span class="keyword">char</span>*)v; <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(ptr+i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用findcrypt插件提示为salsa20加密，一直尝试无果，最后发现了是chacha20，编写脚本即可</p><p><img src="/2022/01/11/note2/image-20220111015157822.png" alt="image-20220111015157822"></p><p>最后的解密脚本：（怎么看出nonce就是dotitist我忘了，大致是动调的结果）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line">secret = <span class="string">&quot;0N3@aYI_M3l0dy_KurOm1_W_Suk1dqy0&quot;</span>.encode()</span><br><span class="line">ciphertext = bytes([<span class="number">0xEB</span>, <span class="number">0x8E</span>, <span class="number">0x5C</span>, <span class="number">0xA5</span>, <span class="number">0x62</span>, <span class="number">0xB4</span>, <span class="number">0x1C</span>, <span class="number">0x84</span>, <span class="number">0x5C</span>, <span class="number">0x59</span>,<span class="number">0xFC</span>, <span class="number">0x0D</span>, <span class="number">0x43</span>, <span class="number">0x3C</span>, <span class="number">0xAB</span>, <span class="number">0x20</span>, <span class="number">0xD8</span>, <span class="number">0x93</span>, <span class="number">0x33</span>, <span class="number">0x13</span>,<span class="number">0xA1</span>, <span class="number">0x9E</span>, <span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0x14</span>, <span class="number">0xB5</span>, <span class="number">0x04</span>, <span class="number">0x58</span>, <span class="number">0x9D</span>,<span class="number">0x06</span>, <span class="number">0xB8</span>])</span><br><span class="line">nonce = <span class="string">&quot;dotitsit&quot;</span>.encode()</span><br><span class="line">cipher = ChaCha20.new(key=secret, nonce=nonce)</span><br><span class="line">plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">print(plaintext)</span><br></pre></td></tr></table></figure><p>得到flag{F1NDM3_4f73r_7H3_5h3LLC0D3}</p><h2 id="强网拟态-babyre-babyre"><a href="#强网拟态-babyre-babyre" class="headerlink" title="强网拟态 babyre babyre"></a>强网拟态 babyre <a href="RE1-babyre.zip">babyre</a></h2><p>其实题目挺简单，我硬是没看出这只是个查表法的aes解密，其余啥都没做。</p><p>扔进ida能大致发现应该是个upx，脱壳后进行分析。</p><h2 id="强网拟态-babytms-babytms"><a href="#强网拟态-babytms-babytms" class="headerlink" title="强网拟态 babytms babytms"></a>强网拟态 babytms <a href="RE2-babytms.zip">babytms</a></h2><p>已经搭建好动调环境，有空学习一波arm指令然后复现一次。</p><h2 id="MBCrackme-MBCrackme"><a href="#MBCrackme-MBCrackme" class="headerlink" title="MBCrackme MBCrackme"></a>MBCrackme <a href="MBCrackme.rar">MBCrackme</a></h2><p>crazyman大佬发的题目，一个exe里就有三题，废物我只做了第一题，主要是思路挺有意思的。.net题目</p><p><img src="/2022/01/11/note2/image-20220111020726584.png" alt="image-20220111020726584"></p><p>按下第一个检查密码按钮进入button1_click函数，可见输入的密码作为密匙解密resources文件，然后将所得到的字节保存并执行。</p><p><img src="/2022/01/11/note2/image-20220111020750665.png" alt="image-20220111020750665"></p><p>解密过程为将resource图片的像素点的颜色值提取出来，然后循环取每位密码的字节作异或</p><p><img src="/2022/01/11/note2/image-20220111021339163.png" alt="image-20220111021339163"></p><p>先将异或前的值提取出来，然后由于最后生成的程序需要执行，不妨假设最后解密后的数据开头是pe的文件头，所以用pe头做密匙异或即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上文b的值</span></span><br><span class="line">arr = <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  arr = f.read()</span><br><span class="line"></span><br><span class="line">pe_head = [</span><br><span class="line">  <span class="number">0x4D</span>,<span class="number">0x5A</span>,<span class="number">0x90</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0xB8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(pe_head)):</span><br><span class="line">  print(chr(arr[j]^pe_head[j]),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#得到easy_level_one_almost_done_xor_pe_and_keep_going!easy_level_</span></span><br><span class="line"><span class="comment">#因为解密为循环去每位密码字节，所以会有重复部分，删除即可</span></span><br><span class="line"></span><br><span class="line">pwd = <span class="string">&quot;easy_level_one_almost_done_xor_pe_and_keep_going!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;level2.exe&quot;</span>,<span class="string">&quot;wb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">    f.write((ord(pwd[i%len(pwd)])^arr[i]).to_bytes(length=<span class="number">1</span>,byteorder=<span class="string">&quot;big&quot;</span>,signed=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>最后得到level2.exe</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;近期做过的一些题目&quot;&gt;&lt;a href=&quot;#近期做过的一些题目&quot; class=&quot;headerlink&quot; title=&quot;近期做过的一些题目&quot;&gt;&lt;/a&gt;近期做过的一些题目&lt;/h1&gt;&lt;p&gt;学业&amp;amp;机器人挺忙的，逆向做一题就很耗时间，实在是不太有时间认真做题，准备直接</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>一些需要用脚本的逆向题目</title>
    <link href="https://jameshoi.github.io/2022/01/11/script/"/>
    <id>https://jameshoi.github.io/2022/01/11/script/</id>
    <published>2022-01-10T18:34:17.000Z</published>
    <updated>2022-01-10T18:59:36.190Z</updated>
    
    <content type="html"><![CDATA[<p>有空把需要idapython脚本解的题目找出来，每个都复现一次，但首先把安卓和不同加密都搞明白先</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有空把需要idapython脚本解的题目找出来，每个都复现一次，但首先把安卓和不同加密都搞明白先&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向学习" scheme="https://jameshoi.github.io/categories/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>TSCTF 2021 逆向题目</title>
    <link href="https://jameshoi.github.io/2022/01/11/tsctf-2021-re/"/>
    <id>https://jameshoi.github.io/2022/01/11/tsctf-2021-re/</id>
    <published>2022-01-10T18:34:17.000Z</published>
    <updated>2022-01-10T19:59:40.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android签到题"><a href="#Android签到题" class="headerlink" title="Android签到题"></a>Android签到题</h1><p>看wp <a href="https://jameshoi.github.io/2021/05/23/tsctf-2021/">https://jameshoi.github.io/2021/05/23/tsctf-2021/</a><br>​</p><h1 id="BabyEasyUWP-BabyEasyUWP-1-0-0-0-Test-rar"><a href="#BabyEasyUWP-BabyEasyUWP-1-0-0-0-Test-rar" class="headerlink" title="BabyEasyUWP BabyEasyUWP_1.0.0.0_Test.rar"></a>BabyEasyUWP <a href="BabyEasyUWP_1.0.0.0_Test.rar">BabyEasyUWP_1.0.0.0_Test.rar</a></h1><p>吐了…这么简单的题目竟然比赛的时候没做出来，主要还是一开始没找到字符串进行定位，ida里面用shift+f12没找到，用火绒剑找到的。<br><img src="/2022/01/11/tsctf-2021-re/1622018958280-2547f687-d981-4ee4-bb87-0012e0602ed3.png" alt="image.png"><br>ps: 原来其实可以不用火绒剑，在string里面右键选择setup修改查找字符串编码<br><img src="/2022/01/11/tsctf-2021-re/1622019524226-429ce1a2-a874-4986-86b1-00f5a0149577.png" alt="image.png"><br>查找效果<br><img src="/2022/01/11/tsctf-2021-re/1622019580341-3dbf74eb-47ef-48af-b060-e657206a9cd8.png" alt="image.png"><br>根据这个地址+基址找到字符串，然后查看交叉引用，找到了关键函数，可见需让v22为0才成功<br><img src="/2022/01/11/tsctf-2021-re/1622019020633-a9f2af4c-b86b-482c-971b-2d0cb4e64cb8.png" alt="image.png"><br>这里判断flag是否相等<br><img src="/2022/01/11/tsctf-2021-re/1622019061845-756abbf9-2e72-434b-a89d-ff39975aa67d.png" alt="image.png"><br>sub那个函数动调发现应该是做了凯撒加密，v11动调发现就是输入的字符串<br><img src="/2022/01/11/tsctf-2021-re/1622019091321-9c4ef5c4-b988-4369-8695-27e8cb835491.png" alt="image.png"><br>因为uwp要依靠ApplicationFrameHost运行，所以只能附加进程进行调试。然而一开始想着是不是还得开个没进行反编译的ida进行附加到进程，然后再定位到关键代码再断点。其实完全不用，分析完后点断点，直接附加进程即可。<br><img src="/2022/01/11/tsctf-2021-re/1622019317811-85716fd1-01a8-46fe-9b09-5f0d45b0a6c1.png" alt="image.png"><br>题外话说多了，继续分析<br>（剩下的后补吧…赶作业先）<br>​</p><h1 id="not-wasm-not-wasm-zip"><a href="#not-wasm-not-wasm-zip" class="headerlink" title="not-wasm not-wasm.zip"></a>not-wasm <a href="not-wasm.zip">not-wasm.zip</a></h1><p>一开始看起来挺恶心的，但其实很好理解，主要这题还是对aes不熟悉…看了五小时硬是没看出是aes<br>​</p><h1 id="ez-stlez-stl-zip"><a href="#ez-stlez-stl-zip" class="headerlink" title="ez_stlez_stl.zip"></a>ez_stl<a href="ez_stl.zip">ez_stl.zip</a></h1><h1 id="yet-another-lua-ext-yet-another-lua-ext-zip"><a href="#yet-another-lua-ext-yet-another-lua-ext-zip" class="headerlink" title="yet-another-lua-ext yet-another-lua-ext.zip"></a>yet-another-lua-ext <a href="yet-another-lua-ext.zip">yet-another-lua-ext.zip</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android签到题&quot;&gt;&lt;a href=&quot;#Android签到题&quot; class=&quot;headerlink&quot; title=&quot;Android签到题&quot;&gt;&lt;/a&gt;Android签到题&lt;/h1&gt;&lt;p&gt;看wp &lt;a href=&quot;https://jameshoi.github.i</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="安卓" scheme="https://jameshoi.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>TSCTF-J 2021 Reverse Official WP</title>
    <link href="https://jameshoi.github.io/2022/01/11/tsctf-j-2021-re/"/>
    <id>https://jameshoi.github.io/2022/01/11/tsctf-j-2021-re/</id>
    <published>2022-01-10T18:34:17.000Z</published>
    <updated>2022-01-10T18:47:22.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TSCTF-J-2021-Reverse-Official-WP"><a href="#TSCTF-J-2021-Reverse-Official-WP" class="headerlink" title="TSCTF-J 2021 Reverse Official WP"></a>TSCTF-J 2021 Reverse Official WP</h1><p><strong>by James</strong></p><h2 id="easyXor"><a href="#easyXor" class="headerlink" title="easyXor"></a>easyXor</h2><p>签到。题目就是题解，xor加密后验证，这里要提多一句，选手可以再仔细分析分析反编译出来的while流程。这里给出相对应的源码，希望选手理解为什么ida反编译后的结果等同于这句源码。<br><img src="/2022/01/11/tsctf-j-2021-re/upload_f2ce5e7cad016d3b698cf77633aa6ecb.png" alt><br>解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    <span class="number">0x59</span>,<span class="number">0x5f</span>,<span class="number">0x4c</span>,<span class="number">0x5a</span>,<span class="number">0x4f</span>,<span class="number">0x25</span>,<span class="number">0x41</span>,<span class="number">0x71</span>,<span class="number">0x52</span>,<span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x4b</span>,<span class="number">0x65</span>,<span class="number">0x31</span>,<span class="number">0x4d</span>,<span class="number">0x66</span>,<span class="number">0x5d</span>,<span class="number">0x2f</span>,<span class="number">0x43</span>,<span class="number">0x4b</span>,<span class="number">0x4d</span>,</span><br><span class="line">    <span class="number">0x5a</span>,<span class="number">0x4c</span>,<span class="number">0x5d</span>,<span class="number">0x37</span>,<span class="number">0x5f</span>,<span class="number">0x4b</span>,<span class="number">0x4f</span>,<span class="number">0x26</span>,<span class="number">0x63</span>,<span class="number">0x4f</span>,</span><br><span class="line">    <span class="number">0x7f</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x7f</span>,<span class="number">0x1f</span>,<span class="number">0x71</span>,<span class="number">0x6c</span>,<span class="number">0x49</span>,<span class="number">0x78</span>,<span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x04</span>,<span class="number">0x05</span>,<span class="number">0x06</span>,<span class="number">0x5b</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">44</span>):</span><br><span class="line">    print(chr(data[i]^i^<span class="number">0xD</span>),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="debugMe"><a href="#debugMe" class="headerlink" title="debugMe"></a>debugMe</h2><p>送分题。可以发现判断了字符串长度与flag头是否为<code>TSCTF-J</code>，然后输入的字符串直接进行比较了，所以动态调试查看buffer变量可以找到flag。这题没用动调的选手可以再做一遍<br><img src="/2022/01/11/tsctf-j-2021-re/upload_bcb68f9c88d737f77dd58757ca786ebf.png" alt><br><img src="/2022/01/11/tsctf-j-2021-re/upload_7911d9c0c4329eca16c0e581fcdc8d0d.png" alt></p><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>送分题，这题做出来的人这么少属于是没想到，选手可以再分析下迷宫变量类型和程序流程。下图可以看出是个10x10的数组，v9，v10是数组索引<br><img src="/2022/01/11/tsctf-j-2021-re/upload_db4c0868e69ba83f09d5076b0c4a232d.png" alt><br>程序漏写了最后终点的判断导致有多解，标准解如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//SSDSSSDDWDDSSSAAAASSDDDDDWDWWWDWWAWAAAWWDDDDD</span></span><br><span class="line"><span class="comment">//TSCTF-J&#123;f62f3965313148ebccaec0bcdb132957&#125;</span></span><br></pre></td></tr></table></figure><h2 id="UpxRand"><a href="#UpxRand" class="headerlink" title="UpxRand"></a>UpxRand</h2><p>这题和去年的PaintUpx是一个意思。upx脱壳后ida分析发现有Sleep函数卡住了导致图片输出不全，patch掉即可，修改汇编方法如下图<br><img src="/2022/01/11/tsctf-j-2021-re/upload_d7849115717d1f1f1c4bbda1734c99f3.png" alt><br>把sleep改成nop，修改后再点击上图中的<code>Apply patches to input file</code><br><img src="/2022/01/11/tsctf-j-2021-re/upload_9856bb908cf70c92f31b4c8dcdad2e5a.png" alt></p><p>再打开软件扫二维码得flag<br><img src="/2022/01/11/tsctf-j-2021-re/upload_46de028f01dfe157e27f693363a364e1.png" alt></p><h2 id="tic-tac-toe"><a href="#tic-tac-toe" class="headerlink" title="tic-tac-toe"></a>tic-tac-toe</h2><p>井字棋，用exeinfope可以发现是c#写的，用dnspy打开<br><img src="/2022/01/11/tsctf-j-2021-re/upload_c84b3d8eb8668007c836abf3a373b344.png" alt><br>可以发现经典c# Form入口，045X7ZYGMK是Form类型<br><img src="/2022/01/11/tsctf-j-2021-re/upload_a79d35ae42ec30b154f5b288022d22fc.png" alt><br>进入后多在几个地方下断点看看变量信息，可以发现有个判断赢了多少次的函数<br><img src="/2022/01/11/tsctf-j-2021-re/upload_e4eef4c8aed7399ea5c09692028bed37.png" alt><br>修改变量绕过判断或其他方法获取flag即可<br><img src="/2022/01/11/tsctf-j-2021-re/upload_7bd900433c8511e33a5e3c50bacdd2c6.png" alt></p><h2 id="Minecraft"><a href="#Minecraft" class="headerlink" title="Minecraft"></a>Minecraft</h2><p>exeinfope可以看出是pyinstaller打包的，github找到pyinstxtractor.py脚本提取exe内容，找到main.pyc进行反编译，当中要注意解包脚本需要和打包时的py版本一致，否则会导致pyc无法反编译。<br><img src="/2022/01/11/tsctf-j-2021-re/upload_cd14e805351050e0ae24789ea843b330.png" alt><br>反编译结果中的关键信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_flag</span>(<span class="params">label_text</span>):</span></span><br><span class="line">    flag = input(<span class="string">&#x27;请输入flag进行验证：&#x27;</span>)</span><br><span class="line">    enflag = [<span class="number">81</span>, <span class="number">77</span>, <span class="number">13</span>, <span class="number">81</span>, <span class="number">25</span>, <span class="number">180</span>, <span class="number">41</span>, <span class="number">237</span>, <span class="number">21</span>, <span class="number">233</span>, <span class="number">125</span>, <span class="number">65</span>, <span class="number">229</span>, <span class="number">209</span>, <span class="number">161</span>, <span class="number">192</span>, <span class="number">161</span>, <span class="number">125</span>, <span class="number">25</span>, <span class="number">85</span>, <span class="number">57</span>, <span class="number">185</span>, <span class="number">229</span>, <span class="number">125</span>, <span class="number">181</span>, <span class="number">141</span>, <span class="number">125</span>, <span class="number">196</span>, <span class="number">205</span>, <span class="number">185</span>, <span class="number">209</span>, <span class="number">125</span>, <span class="number">165</span>, <span class="number">81</span>, <span class="number">245</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">data</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (data &amp; <span class="number">192</span>) &gt;&gt; <span class="number">6</span> | (data &amp; <span class="number">48</span>) &lt;&lt; <span class="number">2</span> | (data &amp; <span class="number">12</span>) &lt;&lt; <span class="number">2</span> | (data &amp; <span class="number">3</span>) &lt;&lt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> enflag == [encrypt(ord(s)) <span class="keyword">for</span> s <span class="keyword">in</span> flag]:</span><br><span class="line">        label_text += <span class="string">&#x27; flag是&#x27;</span> + flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        label_text += <span class="string">&#x27; 输入flag错误&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> label_text</span><br></pre></td></tr></table></figure><p>可见是单字节加密，爆破即可（也可以根据加密推翻），脚本如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enflag &#x3D; [81, 77, 13, 81, 25, 180, 41, 237, 21, 233, 125, 65, 229, 209, 161, 192, 161, 125, 25, 85, 57, 185, 229, 125, 181, 141, 125, 196, 205, 185, 209, 125, 165, 81, 245]</span><br><span class="line">def encrypt(data):</span><br><span class="line">    return (data &amp; 192) &gt;&gt; 6 | (data &amp; 48) &lt;&lt; 2 | (data &amp; 12) &lt;&lt; 2 | (data &amp; 3) &lt;&lt; 2</span><br><span class="line">for s in enflag:</span><br><span class="line">    for d in range(32,127):</span><br><span class="line">        if s &#x3D;&#x3D; encrypt(d): print(chr(d),end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>原题是有壳的，而且题目没有问题，有人说脱不出后就干脆不加壳。<br>main函数里的sub_401C50可以看出是检测进程名称，方法五花八门，总之绕过就行。<br><img src="/2022/01/11/tsctf-j-2021-re/upload_b9f4b19178b88716e59d41b90e3eb42d.png" alt><br>sub_401DB0是个SEH异常反调试，详情请百度<br><img src="/2022/01/11/tsctf-j-2021-re/upload_686f348aa905e180c2aa55640f0fa035.png" alt><br>直接查看汇编，参考刚刚上⾯的源码，反调试的E9刚好起到了花指令的作⽤，patch一下发现了dword_408160有运算<br><img src="/2022/01/11/tsctf-j-2021-re/upload_7574d50c8b72a12601009e9ae275385e.png" alt><br>再返回主函数汇编，发现藏了个函数sub_402870，基本所有常量字符串都加了异或加密，防止定位到这个函数，而且当中接收了输入字符串进行加密验证。<br><img src="/2022/01/11/tsctf-j-2021-re/upload_95771b53b134afe5274de1a86504f417.png" alt><br>先看_Initialize_parallel_init_info函数，发现了NtSetInformationThread，这整个函数是隐藏线程防⽌调试⽤的，绕过就⾏（留意下dword_408160）<br><img src="/2022/01/11/tsctf-j-2021-re/upload_48d61ca47183c4cb07c3a090bfd3d8d1.png" alt><br>这个是smc，动态运行函数，当中有用到dword_408160这个变量进行解密<br><img src="/2022/01/11/tsctf-j-2021-re/upload_4e3e94a0f8cef923adec91903cab4f3f.png" alt><br><img src="/2022/01/11/tsctf-j-2021-re/upload_bcdb112e720accfe942b1b871dcef165.png" alt><br>当反调试函数都过了，让dword_408160+=21,21,14，即dword_408160为56时才解密成功，从⽽调⽤函数，每个加密函数都有固定的花指令。函数分别是异或的变形，加减乘除取余<br><img src="/2022/01/11/tsctf-j-2021-re/upload_ddbf2d8ca16d6329ede3a23dbfe74917.png" alt><br><img src="/2022/01/11/tsctf-j-2021-re/upload_52068edc7ead49f4601d9c9db89f9ada.png" alt><br>过了一层验证后还有md5限制多解，md5字符串也用异或加密了一下校验md5前控制台会输出提示正在做md5<br><img src="/2022/01/11/tsctf-j-2021-re/upload_63f03c4c9de953160e080d4a21515ee4.png" alt><br><img src="/2022/01/11/tsctf-j-2021-re/upload_628d17acf301d3324d751d7736c3771e.png" alt><br>提取md5字符串得到d57d1bc45d6f044959e2e796930a301e，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = [</span><br><span class="line">  <span class="number">0x5C</span>, <span class="number">0x0D</span>, <span class="number">0x0F</span>, <span class="number">0x5C</span>, <span class="number">0x09</span>, <span class="number">0x5A</span>, <span class="number">0x5B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x5C</span>, </span><br><span class="line">  <span class="number">0x0E</span>, <span class="number">0x5E</span>, <span class="number">0x08</span>, <span class="number">0x0C</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x01</span>, <span class="number">0x5D</span>, <span class="number">0x0A</span>, </span><br><span class="line">  <span class="number">0x5D</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x08</span>, <span class="number">0x59</span>, <span class="number">0x0B</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x5D</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    print(chr(s[i]^<span class="number">56</span>),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看出可以单字节爆破，写脚本即可，由于限制md5再写脚本遍历比较md5即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rand100 rand()%10+1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> enflag[] = &#123;</span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0x80</span>, <span class="number">0x3E</span>, <span class="number">0x81</span>, <span class="number">0x85</span>, <span class="number">0x68</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0xA1</span>,</span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0xE3</span>, <span class="number">0xE2</span>, <span class="number">0x1D</span>, <span class="number">0x28</span>, <span class="number">0x40</span>, <span class="number">0xD3</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0x5B</span>, <span class="number">0x69</span>, <span class="number">0x5A</span>, <span class="number">0x27</span>, <span class="number">0xF6</span>, <span class="number">0x03</span>, <span class="number">0x52</span>, <span class="number">0x3E</span>, <span class="number">0x7F</span>, <span class="number">0x26</span>,</span><br><span class="line">  <span class="number">0x66</span>, <span class="number">0x7E</span>, <span class="number">0x9F</span>, <span class="number">0xFD</span>, <span class="number">0x88</span>, <span class="number">0x18</span>, <span class="number">0x46</span>, <span class="number">0xCC</span>, <span class="number">0xBC</span>, <span class="number">0x82</span>,</span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x82</span>, <span class="number">0xA6</span>, <span class="number">0xA5</span>, <span class="number">0x94</span>, <span class="number">0x15</span>, <span class="number">0x1E</span>, <span class="number">0xED</span>, <span class="number">0x29</span>, <span class="number">0x93</span>,</span><br><span class="line">  <span class="number">0x87</span>, <span class="number">0x3F</span>, <span class="number">0x9A</span>, <span class="number">0x3C</span>, <span class="number">0x15</span>, <span class="number">0x61</span>, <span class="number">0xA4</span>, <span class="number">0x3D</span>, <span class="number">0x5C</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> random_list[] = &#123;</span><br><span class="line"><span class="number">0x27</span>,<span class="number">0x14</span>,<span class="number">0x27</span>,<span class="number">0x26</span>,<span class="number">0x38</span>,<span class="number">0x62</span>,<span class="number">0x42</span>,<span class="number">0x56</span>,<span class="number">0x33</span>,<span class="number">0x0D</span>,</span><br><span class="line"><span class="number">0x36</span>,<span class="number">0x01</span>,<span class="number">0x2B</span>,<span class="number">0x52</span>,<span class="number">0x26</span>,<span class="number">0x16</span>,<span class="number">0x2E</span>,<span class="number">0x56</span>,<span class="number">0x62</span>,<span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x4D</span>,<span class="number">0x5C</span>,<span class="number">0x38</span>,<span class="number">0x07</span>,<span class="number">0x3A</span>,<span class="number">0x18</span>,<span class="number">0x52</span>,<span class="number">0x29</span>,<span class="number">0x1A</span>,<span class="number">0x4F</span>,</span><br><span class="line"><span class="number">0x2F</span>,<span class="number">0x5B</span>,<span class="number">0x29</span>,<span class="number">0x58</span>,<span class="number">0x08</span>,<span class="number">0x26</span>,<span class="number">0x0C</span>,<span class="number">0x12</span>,<span class="number">0x39</span>,<span class="number">0x44</span>,</span><br><span class="line"><span class="number">0x22</span>,<span class="number">0x4F</span>,<span class="number">0x18</span>,<span class="number">0x58</span>,<span class="number">0x62</span>,<span class="number">0x55</span>,<span class="number">0x0D</span>,<span class="number">0x0C</span>,<span class="number">0x4F</span>,<span class="number">0x43</span>,</span><br><span class="line"><span class="number">0x1E</span>,<span class="number">0x05</span>,<span class="number">0x50</span>,<span class="number">0x06</span>,<span class="number">0x59</span>,<span class="number">0x32</span>,<span class="number">0x1E</span>,<span class="number">0x4D</span>,<span class="number">0x20</span>,<span class="number">0x41</span>,</span><br><span class="line"><span class="number">0x0F</span>,<span class="number">0x25</span>,<span class="number">0x1D</span>,<span class="number">0x03</span>,<span class="number">0x35</span>,<span class="number">0x05</span>,<span class="number">0x26</span>,<span class="number">0x39</span>,<span class="number">0x63</span>,<span class="number">0x49</span>,</span><br><span class="line"><span class="number">0x62</span>,<span class="number">0x0E</span>,<span class="number">0x54</span>,<span class="number">0x04</span>,<span class="number">0x3D</span>,<span class="number">0x2B</span>,<span class="number">0x30</span>,<span class="number">0x4C</span>,<span class="number">0x48</span>,<span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x4A</span>,<span class="number">0x35</span>,<span class="number">0x14</span>,<span class="number">0x05</span>,<span class="number">0x28</span>,<span class="number">0x57</span>,<span class="number">0x05</span>,<span class="number">0x26</span>,<span class="number">0x18</span>,<span class="number">0x24</span>,</span><br><span class="line"><span class="number">0x22</span>,<span class="number">0x5E</span>,<span class="number">0x15</span>,<span class="number">0x4B</span>,<span class="number">0x54</span>,<span class="number">0x3E</span>,<span class="number">0x19</span>,<span class="number">0x42</span>,<span class="number">0x46</span>,<span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0x44</span>,<span class="number">0x25</span>,<span class="number">0x32</span>,<span class="number">0x25</span>,<span class="number">0x14</span>,<span class="number">0x1C</span>,<span class="number">0x01</span>,<span class="number">0x18</span>,<span class="number">0x17</span>,<span class="number">0x4B</span>,</span><br><span class="line"><span class="number">0x0C</span>,<span class="number">0x3F</span>,<span class="number">0x42</span>,<span class="number">0x5C</span>,<span class="number">0x14</span>,<span class="number">0x30</span>,<span class="number">0x33</span>,<span class="number">0x15</span>,<span class="number">0x23</span>,<span class="number">0x45</span>,</span><br><span class="line"><span class="number">0x19</span>,<span class="number">0x4E</span>,<span class="number">0x2F</span>,<span class="number">0x20</span>,<span class="number">0x3B</span>,<span class="number">0x49</span>,<span class="number">0x1F</span>,<span class="number">0x23</span>,<span class="number">0x52</span>,<span class="number">0x24</span>,</span><br><span class="line"><span class="number">0x44</span>,<span class="number">0x3D</span>,<span class="number">0x0F</span>,<span class="number">0x2B</span>,<span class="number">0x4D</span>,<span class="number">0x1C</span>,<span class="number">0x18</span>,<span class="number">0x5F</span>,<span class="number">0x45</span>,<span class="number">0x2D</span>,</span><br><span class="line"><span class="number">0x19</span>,<span class="number">0x16</span>,<span class="number">0x08</span>,<span class="number">0x61</span>,<span class="number">0x1B</span>,<span class="number">0x40</span>,<span class="number">0x29</span>,<span class="number">0x3F</span>,<span class="number">0x30</span>,<span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x30</span>,<span class="number">0x1D</span>,<span class="number">0x0E</span>,<span class="number">0x54</span>,<span class="number">0x3C</span>,<span class="number">0x2C</span>,<span class="number">0x5C</span>,<span class="number">0x5F</span>,<span class="number">0x3E</span>,<span class="number">0x22</span>,</span><br><span class="line"><span class="number">0x49</span>,<span class="number">0x34</span>,<span class="number">0x37</span>,<span class="number">0x47</span>,<span class="number">0x14</span>,<span class="number">0x4B</span>,<span class="number">0x16</span>,<span class="number">0x17</span>,<span class="number">0x0B</span>,<span class="number">0x35</span>,</span><br><span class="line"><span class="number">0x31</span>,<span class="number">0x39</span>,<span class="number">0x0C</span>,<span class="number">0x4C</span>,<span class="number">0x25</span>,<span class="number">0x14</span>,<span class="number">0x59</span>,<span class="number">0x38</span>,<span class="number">0x30</span>,<span class="number">0x29</span>,</span><br><span class="line"><span class="number">0x37</span>,<span class="number">0x5E</span>,<span class="number">0x38</span>,<span class="number">0x2A</span>,<span class="number">0x05</span>,<span class="number">0x44</span>,<span class="number">0x11</span>,<span class="number">0x39</span>,<span class="number">0x02</span>,<span class="number">0x1C</span>,</span><br><span class="line"><span class="number">0x0F</span>,<span class="number">0x34</span>,<span class="number">0x54</span>,<span class="number">0x50</span>,<span class="number">0x4B</span>,<span class="number">0x2F</span>,<span class="number">0x0F</span>,<span class="number">0x64</span>,<span class="number">0x42</span>,<span class="number">0x26</span>,</span><br><span class="line"><span class="number">0x3D</span>,<span class="number">0x35</span>,<span class="number">0x4C</span>,<span class="number">0x3D</span>,<span class="number">0x57</span>,<span class="number">0x33</span>,<span class="number">0x17</span>,<span class="number">0x22</span>,<span class="number">0x38</span>,<span class="number">0x3A</span>,</span><br><span class="line"><span class="number">0x45</span>,<span class="number">0x62</span>,<span class="number">0x4C</span>,<span class="number">0x2A</span>,<span class="number">0x29</span>,<span class="number">0x4E</span>,<span class="number">0x2C</span>,<span class="number">0x52</span>,<span class="number">0x11</span>,<span class="number">0x17</span>,</span><br><span class="line"><span class="number">0x30</span>,<span class="number">0x0D</span>,<span class="number">0x5C</span>,<span class="number">0x18</span>,<span class="number">0x21</span>,<span class="number">0x60</span>,<span class="number">0x42</span>,<span class="number">0x07</span>,<span class="number">0x4C</span>,<span class="number">0x50</span>,</span><br><span class="line"><span class="number">0x1C</span>,<span class="number">0x22</span>,<span class="number">0x36</span>,<span class="number">0x30</span>,<span class="number">0x53</span>,<span class="number">0x3F</span>,<span class="number">0x02</span>,<span class="number">0x2D</span>,<span class="number">0x39</span>,<span class="number">0x2E</span>,</span><br><span class="line"><span class="number">0x5C</span>,<span class="number">0x3C</span>,<span class="number">0x0F</span>,<span class="number">0x0E</span>,<span class="number">0x5F</span>,<span class="number">0x37</span>,<span class="number">0x42</span>,<span class="number">0x13</span>,<span class="number">0x4E</span>,<span class="number">0x54</span>,</span><br><span class="line"><span class="number">0x59</span>,<span class="number">0x5F</span>,<span class="number">0x09</span>,<span class="number">0x06</span>,<span class="number">0x4D</span>,<span class="number">0x62</span>,<span class="number">0x23</span>,<span class="number">0x4E</span>,<span class="number">0x15</span>,<span class="number">0x1A</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0x35</span>,<span class="number">0x49</span>,<span class="number">0x2E</span>,<span class="number">0x43</span>,<span class="number">0x3E</span>,<span class="number">0x3A</span>,<span class="number">0x5A</span>,<span class="number">0x3C</span>,<span class="number">0x0B</span>,</span><br><span class="line"><span class="number">0x4C</span>,<span class="number">0x29</span>,<span class="number">0x41</span>,<span class="number">0x1B</span>,<span class="number">0x5E</span>,<span class="number">0x62</span>,<span class="number">0x10</span>,<span class="number">0x5A</span>,<span class="number">0x5D</span>,<span class="number">0x3D</span>,</span><br><span class="line"><span class="number">0x52</span>,<span class="number">0x61</span>,<span class="number">0x0C</span>,<span class="number">0x50</span>,<span class="number">0x4F</span>,<span class="number">0x37</span>,<span class="number">0x3B</span>,<span class="number">0x63</span>,<span class="number">0x25</span>,<span class="number">0x04</span>,</span><br><span class="line"><span class="number">0x3B</span>,<span class="number">0x2C</span>,<span class="number">0x18</span>,<span class="number">0x54</span>,<span class="number">0x04</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> input, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">input ^= random_list[i * <span class="number">5</span>];</span><br><span class="line">input += random_list[i * <span class="number">5</span> + <span class="number">1</span>];</span><br><span class="line">input *= random_list[i * <span class="number">5</span> + <span class="number">2</span>];</span><br><span class="line">input -= random_list[i * <span class="number">5</span> + <span class="number">3</span>];</span><br><span class="line">input %= <span class="number">66666</span>;</span><br><span class="line"><span class="keyword">return</span> input &amp; <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">brute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">59</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">32</span>; j &lt; <span class="number">133</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (encode(j, i) == enflag[i]) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>)j ;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">brute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>flag是TSCTF-J{cRaCK_sMC_ls_S0_eA2Y_AnD_i_B3iLeVE_y0u_CAN_ALLKILL}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TSCTF-J-2021-Reverse-Official-WP&quot;&gt;&lt;a href=&quot;#TSCTF-J-2021-Reverse-Official-WP&quot; class=&quot;headerlink&quot; title=&quot;TSCTF-J 2021 Reverse Officia</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="TSCTFJ" scheme="https://jameshoi.github.io/tags/TSCTFJ/"/>
    
  </entry>
  
  <entry>
    <title>2021年逆向题目复现</title>
    <link href="https://jameshoi.github.io/2021/11/23/ctf-2021/"/>
    <id>https://jameshoi.github.io/2021/11/23/ctf-2021/</id>
    <published>2021-11-23T08:33:38.000Z</published>
    <updated>2022-05-01T15:56:52.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="D3CTF"><a href="#D3CTF" class="headerlink" title="D3CTF"></a>D3CTF</h2><h3 id="jumpjump"><a href="#jumpjump" class="headerlink" title="jumpjump"></a>jumpjump</h3><p>没什么好说的，两次异或简单运算就出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x09</span>,<span class="number">0x0B</span>,<span class="number">0x06</span>,<span class="number">0x5A</span>,<span class="number">0x5B</span>,<span class="number">0x0A</span>,<span class="number">0x54</span>,<span class="number">0x05</span>,<span class="number">0x4D</span>,<span class="number">0x57</span>,</span><br><span class="line">       <span class="number">0x56</span>,<span class="number">0x54</span>,<span class="number">0x0B</span>,<span class="number">0x4D</span>,<span class="number">0x54</span>,<span class="number">0x09</span>,<span class="number">0x55</span>,<span class="number">0x40</span>,<span class="number">0x4D</span>,<span class="number">0x09</span>,</span><br><span class="line">       <span class="number">0x06</span>,<span class="number">0x59</span>,<span class="number">0x0B</span>,<span class="number">0x4D</span>,<span class="number">0x55</span>,<span class="number">0x54</span>,<span class="number">0x58</span>,<span class="number">0x57</span>,<span class="number">0x5B</span>,<span class="number">0x09</span>,</span><br><span class="line">       <span class="number">0x0B</span>,<span class="number">0x40</span>,<span class="number">0x05</span>,<span class="number">0x0A</span>,<span class="number">0x05</span>,<span class="number">0x09</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</span><br><span class="line">    print(chr(((enc[i]^<span class="number">0x33</span>)<span class="number">-4</span>)^<span class="number">0x57</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#acf23b4e-764c-4a58-af1c-54073ac8ebea</span></span><br></pre></td></tr></table></figure><h3 id="ancient"><a href="#ancient" class="headerlink" title="ancient"></a>ancient</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;D3CTF&quot;&gt;&lt;a href=&quot;#D3CTF&quot; class=&quot;headerlink&quot; title=&quot;D3CTF&quot;&gt;&lt;/a&gt;D3CTF&lt;/h2&gt;&lt;h3 id=&quot;jumpjump&quot;&gt;&lt;a href=&quot;#jumpjump&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>2021年逆向题目复现</title>
    <link href="https://jameshoi.github.io/2021/11/23/il2cpp-crack/"/>
    <id>https://jameshoi.github.io/2021/11/23/il2cpp-crack/</id>
    <published>2021-11-23T08:33:38.000Z</published>
    <updated>2022-05-23T12:31:32.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="il2cpp"><a href="#il2cpp" class="headerlink" title="il2cpp"></a>il2cpp</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;il2cpp&quot;&gt;&lt;a href=&quot;#il2cpp&quot; class=&quot;headerlink&quot; title=&quot;il2cpp&quot;&gt;&lt;/a&gt;il2cpp&lt;/h2&gt;</summary>
      
    
    
    
    <category term="逆向学习" scheme="https://jameshoi.github.io/categories/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="il2cpp" scheme="https://jameshoi.github.io/tags/il2cpp/"/>
    
    <category term="unity" scheme="https://jameshoi.github.io/tags/unity/"/>
    
    <category term="游戏破解" scheme="https://jameshoi.github.io/tags/%E6%B8%B8%E6%88%8F%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>安卓逆向学习</title>
    <link href="https://jameshoi.github.io/2021/05/26/android/"/>
    <id>https://jameshoi.github.io/2021/05/26/android/</id>
    <published>2021-05-26T06:39:26.000Z</published>
    <updated>2021-07-09T16:59:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ADB的一些指令"><a href="#ADB的一些指令" class="headerlink" title="ADB的一些指令"></a>ADB的一些指令</h1><p>参考这个文章<a href="https://blog.csdn.net/ezconn/article/details/85682916">https://blog.csdn.net/ezconn/article/details/85682916</a>，这里只写一些常用指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb conncet ip:port            //例如mumu是127.0.0.1:7555</span><br><span class="line">adb shell                      //命令行</span><br><span class="line">adb push/ adb pull             //传输文件</span><br><span class="line">adb forward tcp:port tcp:port  //端口转发</span><br><span class="line">adb install xxx.apk            //安装apk</span><br></pre></td></tr></table></figure></p><h1 id="IDA-动态调试"><a href="#IDA-动态调试" class="headerlink" title="IDA 动态调试"></a>IDA 动态调试</h1><ol><li>先adb shell运行android_sever</li><li>由于软件会一进入就加载so，</li></ol><h1 id="Smali语法"><a href="#Smali语法" class="headerlink" title="Smali语法"></a>Smali语法</h1><p>参考<a href="https://blog.csdn.net/lixpjita39/article/details/75193833">https://blog.csdn.net/lixpjita39/article/details/75193833</a><br>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ADB的一些指令&quot;&gt;&lt;a href=&quot;#ADB的一些指令&quot; class=&quot;headerlink&quot; title=&quot;ADB的一些指令&quot;&gt;&lt;/a&gt;ADB的一些指令&lt;/h1&gt;&lt;p&gt;参考这个文章&lt;a href=&quot;https://blog.csdn.net/ezconn/ar</summary>
      
    
    
    
    <category term="逆向学习" scheme="https://jameshoi.github.io/categories/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="安卓" scheme="https://jameshoi.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>TSCTF 2021 Writeup by sakura</title>
    <link href="https://jameshoi.github.io/2021/05/23/tsctf-2021/"/>
    <id>https://jameshoi.github.io/2021/05/23/tsctf-2021/</id>
    <published>2021-05-23T08:33:38.000Z</published>
    <updated>2022-01-10T19:16:55.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android签到题re1-zip"><a href="#Android签到题re1-zip" class="headerlink" title="Android签到题re1.zip"></a>Android签到题<a href="re1.zip">re1.zip</a></h2><p>可以看出是动态加载dex<br><img src="/2021/05/23/tsctf-2021/upload_785c5365aed77c40eceb16f33d9a9534.png" alt><br>网上查到该dex加载路径，用虚拟机找到该文件<br><img src="/2021/05/23/tsctf-2021/upload_2e2dfe04bfe0ae6c09446d9203d7caee.png" alt><br>关键加密函数<br><img src="/2021/05/23/tsctf-2021/upload_40f049f4f3d38f8ecbcb5ba14aa94ab3.png" alt><br>爆破解出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">tmp1 = [ <span class="number">147</span>, <span class="number">219</span>, <span class="number">146</span>, <span class="number">143</span>, <span class="number">240</span>, <span class="number">200</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">136</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">196</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="number">254</span>, <span class="number">189</span>, <span class="string">&#x27;s&#x27;</span>, <span class="number">253</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;~&#x27;</span>, <span class="number">252</span>, <span class="number">135</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">128</span>, <span class="number">3</span>, <span class="number">226</span>, <span class="number">17</span>, <span class="number">142</span>, <span class="number">254</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="number">155</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;:&#x27;</span>, <span class="number">199</span>, <span class="number">223</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="number">184</span>, <span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;L&#x27;</span>]</span><br><span class="line">enflag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(tmp1)):</span><br><span class="line">    <span class="keyword">if</span> type(tmp1[i])==str: enflag.append(ord(tmp1[i]))</span><br><span class="line">    <span class="keyword">else</span>: enflag.append(tmp1[i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">flag</span>):</span></span><br><span class="line">    cArr = [<span class="number">183</span>,<span class="number">232</span>,<span class="number">151</span>,<span class="number">64</span>,<span class="number">46</span>,<span class="number">200</span>,<span class="number">155</span>,<span class="number">10</span>,<span class="number">44</span>,<span class="number">138</span>,<span class="number">221</span>,<span class="number">76</span>,<span class="number">147</span>,<span class="number">99</span>,<span class="number">163</span>,<span class="number">226</span>,<span class="number">137</span>,<span class="number">102</span>,<span class="number">236</span>,<span class="number">39</span>,<span class="number">216</span>,<span class="number">35</span>,<span class="number">238</span>,<span class="number">55</span>,<span class="number">222</span>,<span class="number">78</span>,<span class="number">234</span>,<span class="number">164</span>,<span class="number">211</span>,<span class="number">179</span>,<span class="number">184</span>,<span class="number">122</span>,<span class="number">24</span>,<span class="number">241</span>,<span class="number">157</span>,<span class="number">48</span>,<span class="number">153</span>,<span class="number">49</span>,<span class="number">186</span>,<span class="number">15</span>,<span class="number">75</span>,<span class="number">62</span>,<span class="number">152</span>,<span class="number">37</span>,<span class="number">1</span>,<span class="number">243</span>,<span class="number">106</span>,<span class="number">38</span>,<span class="number">119</span>,<span class="number">86</span>,<span class="number">112</span>,<span class="number">140</span>,<span class="number">107</span>,<span class="number">167</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">118</span>,<span class="number">150</span>,<span class="number">199</span>,<span class="number">182</span>,<span class="number">156</span>,<span class="number">117</span>,<span class="number">79</span>,<span class="number">2</span>,<span class="number">170</span>,<span class="number">228</span>,<span class="number">63</span>,<span class="number">214</span>,<span class="number">28</span>,<span class="number">133</span>,<span class="number">253</span>,<span class="number">123</span>,<span class="number">12</span>,<span class="number">237</span>,<span class="number">154</span>,<span class="number">89</span>,<span class="number">61</span>,<span class="number">127</span>,<span class="number">189</span>,<span class="number">5</span>,<span class="number">130</span>,<span class="number">105</span>,<span class="number">30</span>,<span class="number">190</span>,<span class="number">93</span>,<span class="number">7</span>,<span class="number">206</span>,<span class="number">145</span>,<span class="number">172</span>,<span class="number">176</span>,<span class="number">247</span>,<span class="number">3</span>,<span class="number">111</span>,<span class="number">134</span>,<span class="number">66</span>,<span class="number">169</span>,<span class="number">26</span>,<span class="number">204</span>,<span class="number">174</span>,<span class="number">173</span>,<span class="number">27</span>,<span class="number">36</span>,<span class="number">50</span>,<span class="number">72</span>,<span class="number">71</span>,<span class="number">103</span>,<span class="number">42</span>,<span class="number">65</span>,<span class="number">29</span>,<span class="number">168</span>,<span class="number">92</span>,<span class="number">131</span>,<span class="number">143</span>,<span class="number">53</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">240</span>,<span class="number">171</span>,<span class="number">148</span>,<span class="number">175</span>,<span class="number">159</span>,<span class="number">0</span>,<span class="number">60</span>,<span class="number">11</span>,<span class="number">43</span>,<span class="number">165</span>,<span class="number">17</span>,<span class="number">51</span>,<span class="number">244</span>,<span class="number">248</span>,<span class="number">224</span>,<span class="number">121</span>,<span class="number">77</span>,<span class="number">13</span>,<span class="number">215</span>,<span class="number">210</span>,<span class="number">205</span>,<span class="number">166</span>,<span class="number">81</span>,<span class="number">85</span>,<span class="number">229</span>,<span class="number">162</span>,<span class="number">54</span>,<span class="number">197</span>,<span class="number">201</span>,<span class="number">45</span>,<span class="number">194</span>,<span class="number">144</span>,<span class="number">97</span>,<span class="number">80</span>,<span class="number">96</span>,<span class="number">231</span>,<span class="number">68</span>,<span class="number">239</span>,<span class="number">32</span>,<span class="number">52</span>,<span class="number">25</span>,<span class="number">83</span>,<span class="number">242</span>,<span class="number">67</span>,<span class="number">198</span>,<span class="number">124</span>,<span class="number">90</span>,<span class="number">230</span>,<span class="number">132</span>,<span class="number">225</span>,<span class="number">185</span>,<span class="number">110</span>,<span class="number">98</span>,<span class="number">135</span>,<span class="number">8</span>,<span class="number">47</span>,<span class="number">219</span>,<span class="number">203</span>,<span class="number">142</span>,<span class="number">59</span>,<span class="number">227</span>,<span class="number">195</span>,<span class="number">146</span>,<span class="number">233</span>,<span class="number">58</span>,<span class="number">115</span>,<span class="number">113</span>,<span class="number">116</span>,<span class="number">178</span>,<span class="number">217</span>,<span class="number">252</span>,<span class="number">213</span>,<span class="number">95</span>,<span class="number">202</span>,<span class="number">223</span>,<span class="number">188</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">69</span>,<span class="number">250</span>,<span class="number">208</span>,<span class="number">23</span>,<span class="number">57</span>,<span class="number">218</span>,<span class="number">84</span>,<span class="number">245</span>,<span class="number">136</span>,<span class="number">91</span>,<span class="number">180</span>,<span class="number">181</span>,<span class="number">56</span>,<span class="number">187</span>,<span class="number">220</span>,<span class="number">41</span>,<span class="number">40</span>,<span class="number">120</span>,<span class="number">114</span>,<span class="number">160</span>,<span class="number">34</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">141</span>,<span class="number">177</span>,<span class="number">149</span>,<span class="number">251</span>,<span class="number">212</span>,<span class="number">94</span>,<span class="number">87</span>,<span class="number">191</span>,<span class="number">14</span>,<span class="number">125</span>,<span class="number">192</span>,<span class="number">255</span>,<span class="number">88</span>,<span class="number">139</span>,<span class="number">249</span>,<span class="number">82</span>,<span class="number">193</span>,<span class="number">21</span>,<span class="number">74</span>,<span class="number">73</span>,<span class="number">126</span>,<span class="number">235</span>,<span class="number">207</span>,<span class="number">158</span>,<span class="number">109</span>,<span class="number">254</span>,<span class="number">31</span>,<span class="number">129</span>,<span class="number">104</span>,<span class="number">70</span>,<span class="number">246</span>,<span class="number">196</span>,<span class="number">100</span>,<span class="number">6</span>,<span class="number">128</span>,<span class="number">209</span>,<span class="number">161</span>,<span class="number">16</span>,<span class="number">33</span>]    </span><br><span class="line">    cArr3 = [<span class="number">0</span>]*<span class="number">43</span></span><br><span class="line">    i3 = <span class="number">0</span>;</span><br><span class="line">    i4 = <span class="number">0</span>;</span><br><span class="line">    str_len = <span class="number">43</span></span><br><span class="line">    <span class="keyword">for</span> i5 <span class="keyword">in</span> range(str_len):</span><br><span class="line">        i3 = (i3 + <span class="number">1</span>) &amp; <span class="number">255</span></span><br><span class="line">        i4 = (i4 + cArr[i3]) &amp; <span class="number">255</span></span><br><span class="line">        cArr[i3] = cArr[i3] ^ cArr[i4]</span><br><span class="line">        cArr[i4] = cArr[i4] ^ cArr[i3]</span><br><span class="line">        cArr[i3] = cArr[i3] ^ cArr[i4]</span><br><span class="line">        cArr3[i5] = cArr[(cArr[i3] + cArr[i4]) &amp; <span class="number">255</span>] ^ flag[i5]</span><br><span class="line">    <span class="keyword">return</span> cArr3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">global</span> enflag</span><br><span class="line">    flag = [<span class="number">0</span>]*<span class="number">43</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        flag[i] = j+<span class="number">32</span></span><br><span class="line">        <span class="keyword">if</span> enflag[i] == encode(flag)[i]: </span><br><span class="line">            print(chr(flag[i]),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">43</span>):</span><br><span class="line">    brute(i)</span><br><span class="line"><span class="comment">#TSCTF&#123;44a526be-0f5c-4e99-88e6-3d7eac912391&#125;</span></span><br></pre></td></tr></table></figure><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>关注公众号回复即可</p><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><p>填写问卷即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Android签到题re1-zip&quot;&gt;&lt;a href=&quot;#Android签到题re1-zip&quot; class=&quot;headerlink&quot; title=&quot;Android签到题re1.zip&quot;&gt;&lt;/a&gt;Android签到题&lt;a href=&quot;re1.zip&quot;&gt;re1.zip</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="安卓" scheme="https://jameshoi.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>C语言读取BMP格式图片并修改保存</title>
    <link href="https://jameshoi.github.io/2021/05/10/bmp/"/>
    <id>https://jameshoi.github.io/2021/05/10/bmp/</id>
    <published>2021-05-09T20:57:57.000Z</published>
    <updated>2021-07-09T16:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>朋友之前请教我BMP图片格式的问题，网上查了查参考这个<a href="https://blog.csdn.net/u013066730/article/details/82625158">https://blog.csdn.net/u013066730/article/details/82625158</a><br>刚好学习了一波，代码如下（其实准确来讲这个是c++代码，但除了用到了cout，其他都与c一致）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BYTE b;</span><br><span class="line">BYTE g;</span><br><span class="line">BYTE r;</span><br><span class="line">&#125;RGB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BYTE b;</span><br><span class="line">BYTE g;</span><br><span class="line">BYTE r;</span><br><span class="line">BYTE a;</span><br><span class="line">&#125;RGBA;</span><br><span class="line"></span><br><span class="line"><span class="function">RGBA <span class="title">imgOpr32</span><span class="params">(RGBA a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RGBA b;</span><br><span class="line">b.b = <span class="number">255</span> - a.b;</span><br><span class="line">b.g = <span class="number">255</span> - a.g;</span><br><span class="line">b.r = <span class="number">255</span> - a.r;</span><br><span class="line">b.a = a.a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">RGB <span class="title">imgOpr24</span><span class="params">(RGB a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RGB b;</span><br><span class="line">b.b = <span class="number">255</span> - a.b;</span><br><span class="line">b.g = <span class="number">255</span> - a.g;</span><br><span class="line">b.r = <span class="number">255</span> - a.r;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BITMAPFILEHEADER fileHeader;</span><br><span class="line">BITMAPINFOHEADER infoHeader;</span><br><span class="line">FILE* pfin = fopen(<span class="string">&quot;./test2_32.bmp&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">FILE* pfout = fopen(<span class="string">&quot;./test3.bmp&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="comment">//Read the Bitmap file header;  </span></span><br><span class="line">fread(&amp;fileHeader, <span class="keyword">sizeof</span>(BITMAPFILEHEADER), <span class="number">1</span>, pfin);</span><br><span class="line"><span class="comment">//Read the Bitmap info header;  </span></span><br><span class="line">fread(&amp;infoHeader, <span class="keyword">sizeof</span>(BITMAPINFOHEADER), <span class="number">1</span>, pfin);</span><br><span class="line"><span class="comment">//Define variable of Bitmap;</span></span><br><span class="line"><span class="keyword">int</span> ImageHeight = infoHeader.biHeight;</span><br><span class="line"><span class="keyword">int</span> ImageWidth = infoHeader.biWidth;</span><br><span class="line"><span class="keyword">int</span> BitsPerPixel = infoHeader.biBitCount;</span><br><span class="line"><span class="comment">//Calculate </span></span><br><span class="line"><span class="keyword">int</span> LineByteCnt = (((ImageWidth * infoHeader.biBitCount) + <span class="number">31</span>) &gt;&gt; <span class="number">5</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> ImageDataSize = LineByteCnt * ImageHeight;</span><br><span class="line"><span class="keyword">int</span> PaddingSize = <span class="number">4</span> - ((ImageWidth * BitsPerPixel) &gt;&gt; <span class="number">3</span>) &amp; <span class="number">3</span>;</span><br><span class="line">BYTE *pad = <span class="keyword">new</span> BYTE[PaddingSize];</span><br><span class="line"><span class="keyword">int</span> PixelCnt = ImageHeight * ImageWidth;</span><br><span class="line"><span class="comment">//Check BitsPerPixel</span></span><br><span class="line"><span class="keyword">if</span> (BitsPerPixel != <span class="number">24</span> &amp;&amp; BitsPerPixel != <span class="number">32</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此程序不支持非24位且非32位的BMP图片&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (BitsPerPixel == <span class="number">32</span>) &#123;</span><br><span class="line"><span class="comment">//Read Bitmp</span></span><br><span class="line">RGBA *img = <span class="keyword">new</span> RGBA[PixelCnt];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ImageHeight; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ImageWidth; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = i * ImageWidth + j;</span><br><span class="line">fread(&amp;img[index], <span class="keyword">sizeof</span>(RGBA), <span class="number">1</span>, pfin);</span><br><span class="line">img[index] = imgOpr32(img[index]); <span class="comment">//反色运算</span></span><br><span class="line">&#125;</span><br><span class="line">fread(pad, <span class="number">1</span>, PaddingSize, pfin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将修改后的图片保存到文件   </span></span><br><span class="line">fwrite(&amp;fileHeader, <span class="keyword">sizeof</span>(fileHeader), <span class="number">1</span>, pfout);</span><br><span class="line">fwrite(&amp;infoHeader, <span class="keyword">sizeof</span>(infoHeader), <span class="number">1</span>, pfout);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ImageHeight; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ImageWidth; j++)</span><br><span class="line">fwrite(&amp;img[i * ImageWidth + j], <span class="keyword">sizeof</span>(RGBA), <span class="number">1</span>, pfout);</span><br><span class="line">fwrite(pad, <span class="number">1</span>, PaddingSize, pfout);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BitsPerPixel == <span class="number">24</span>) &#123;</span><br><span class="line"><span class="comment">//Read Bitmp</span></span><br><span class="line">RGB *img = <span class="keyword">new</span> RGB[PixelCnt];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ImageHeight; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ImageWidth; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = i * ImageWidth + j;</span><br><span class="line">fread(&amp;img[index], <span class="keyword">sizeof</span>(RGB), <span class="number">1</span>, pfin);</span><br><span class="line">img[index] = imgOpr24(img[index]); <span class="comment">//反色运算</span></span><br><span class="line">&#125;</span><br><span class="line">fread(pad, <span class="number">1</span>, PaddingSize, pfin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将修改后的图片保存到文件   </span></span><br><span class="line">fwrite(&amp;fileHeader, <span class="keyword">sizeof</span>(fileHeader), <span class="number">1</span>, pfout);</span><br><span class="line">fwrite(&amp;infoHeader, <span class="keyword">sizeof</span>(infoHeader), <span class="number">1</span>, pfout);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ImageHeight; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ImageWidth; j++)</span><br><span class="line">fwrite(&amp;img[i * ImageWidth + j], <span class="keyword">sizeof</span>(RGB), <span class="number">1</span>, pfout);</span><br><span class="line">fwrite(pad, <span class="number">1</span>, PaddingSize, pfout);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//End</span></span><br><span class="line">fclose(pfin);</span><br><span class="line">fclose(pfout);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>原图（左），反色后（右）<br><img src="/2021/05/10/bmp/1620622770522-e3eeaff7-9eae-4865-8bd4-0f80f27cd44a.png" alt="image.png">     <img src="/2021/05/10/bmp/1620622808216-cc8e688a-929e-41cd-a1fc-ab981a908a78.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;朋友之前请教我BMP图片格式的问题，网上查了查参考这个&lt;a href=&quot;https://blog.csdn.net/u013066730/article/details/82625158&quot;&gt;https://blog.csdn.net/u013066730/article/d</summary>
      
    
    
    
    <category term="杂项" scheme="https://jameshoi.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言实现命令行显示图片</title>
    <link href="https://jameshoi.github.io/2021/05/10/pic-console/"/>
    <id>https://jameshoi.github.io/2021/05/10/pic-console/</id>
    <published>2021-05-09T19:05:19.000Z</published>
    <updated>2021-07-09T16:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加载本地图片"><a href="#加载本地图片" class="headerlink" title="加载本地图片"></a>加载本地图片</h1><p>参考了<a href="https://kc.kexinshe.com/t/81443">https://kc.kexinshe.com/t/81443</a>文章<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 隐藏光标</span></span><br><span class="line">CONSOLE_CURSOR_INFO curinfo = &#123; <span class="keyword">sizeof</span> curinfo, FALSE &#125;;</span><br><span class="line">SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp;curinfo);</span><br><span class="line"><span class="comment">// 获取控制台窗口句柄</span></span><br><span class="line">HWND hwnd = GetForegroundWindow();</span><br><span class="line"><span class="comment">// 获取绘图句柄</span></span><br><span class="line">HDC hdc = GetDC(hwnd);</span><br><span class="line"><span class="comment">//获取客户区大小</span></span><br><span class="line">RECT rc; GetClientRect(hwnd, &amp;rc);</span><br><span class="line"><span class="comment">// 循环绘图</span></span><br><span class="line"><span class="keyword">while</span> (TRUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 选择TrueType字体</span></span><br><span class="line">SelectObject(hdc, GetStockObject(DEFAULT_GUI_FONT));</span><br><span class="line"><span class="comment">// 加载本地HBITMAP</span></span><br><span class="line">HBITMAP hbm = (HBITMAP)LoadImage(<span class="literal">NULL</span>, <span class="string">&quot;pic2.bmp&quot;</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line"><span class="comment">// 缓冲绘图句柄，将hbm存入句柄中</span></span><br><span class="line">        HDC buffer = CreateCompatibleDC(<span class="literal">NULL</span>); SelectObject(buffer, hbm);</span><br><span class="line">        <span class="comment">// 获取图片大小</span></span><br><span class="line">BITMAP bitmapInfo; GetObject(hbm, <span class="keyword">sizeof</span>(BITMAP),&amp;bitmapInfo);</span><br><span class="line">        <span class="comment">// 把hbm画到命令行中</span></span><br><span class="line">BitBlt(hdc, <span class="number">0</span>, <span class="number">0</span>, bitmapInfo.bmWidth, bitmapInfo.bmHeight, buffer, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);</span><br><span class="line">        <span class="comment">//释放图片空间，否则内存占用空间非常大</span></span><br><span class="line">        DeleteObject(hbm);</span><br><span class="line"><span class="comment">// 刷新频率10Hz</span></span><br><span class="line">Sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放绘图句柄并清空命令列表</span></span><br><span class="line">ReleaseDC(hwnd, hdc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2021/05/10/pic-console/1620620807203-e927994a-7d6b-4941-a728-f4ac4f00cd4e.png" alt="image.png"></p><h1 id="将像素点转HBitmap并画图"><a href="#将像素点转HBitmap并画图" class="headerlink" title="将像素点转HBitmap并画图"></a>将像素点转HBitmap并画图</h1><p>参考这个<a href="https://stackoverflow.com/questions/15930528/how-to-convert-an-array-of-pixels-to-hbitmap">https://stackoverflow.com/questions/15930528/how-to-convert-an-array-of-pixels-to-hbitmap</a>，把生成的HBitmap用上面的方法画图即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HBITMAP <span class="title">LoadPic</span><span class="params">(HDC hdc)</span> </span>&#123;</span><br><span class="line">BITMAPINFOHEADER bmih;</span><br><span class="line">bmih.biSize = <span class="keyword">sizeof</span>(BITMAPINFOHEADER);</span><br><span class="line">bmih.biWidth = <span class="number">540</span>;</span><br><span class="line">bmih.biHeight = <span class="number">541</span>;</span><br><span class="line">bmih.biPlanes = <span class="number">1</span>;</span><br><span class="line">bmih.biBitCount = <span class="number">24</span>;</span><br><span class="line">bmih.biCompression = BI_RGB;</span><br><span class="line">bmih.biSizeImage = <span class="number">0</span>;</span><br><span class="line">bmih.biXPelsPerMeter = <span class="number">10</span>;</span><br><span class="line">bmih.biYPelsPerMeter = <span class="number">10</span>;</span><br><span class="line">bmih.biClrUsed = <span class="number">0</span>;</span><br><span class="line">bmih.biClrImportant = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">BITMAPINFO dbmi;</span><br><span class="line">ZeroMemory(&amp;dbmi, <span class="keyword">sizeof</span>(dbmi));</span><br><span class="line">dbmi.bmiHeader = bmih;</span><br><span class="line">dbmi.bmiColors-&gt;rgbBlue = <span class="number">0</span>;</span><br><span class="line">dbmi.bmiColors-&gt;rgbGreen = <span class="number">0</span>;</span><br><span class="line">dbmi.bmiColors-&gt;rgbRed = <span class="number">0</span>;</span><br><span class="line">dbmi.bmiColors-&gt;rgbReserved = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* bits = (<span class="keyword">void</span>*)&amp;(imgData[<span class="number">0</span>]);<span class="comment">//BMP图片像素点，注意是BGR格式并非RGB</span></span><br><span class="line">HBITMAP hBitmap = CreateDIBSection(hdc, &amp;dbmi, DIB_RGB_COLORS, &amp;bits, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(bits, imgData, <span class="keyword">sizeof</span>(imgData));</span><br><span class="line"><span class="keyword">return</span> hBitmap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记得调用完此函数后要释放HBITMAP的空间，否则内存占用非常大</span></span><br><span class="line"><span class="comment">//DeleteObject(hbm);</span></span><br></pre></td></tr></table></figure><br>若对BMP读写有问题可以参考我的另外一篇文章<br><a href="https://www.yuque.com/jameshoi/default/bmp">https://www.yuque.com/jameshoi/default/bmp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;加载本地图片&quot;&gt;&lt;a href=&quot;#加载本地图片&quot; class=&quot;headerlink&quot; title=&quot;加载本地图片&quot;&gt;&lt;/a&gt;加载本地图片&lt;/h1&gt;&lt;p&gt;参考了&lt;a href=&quot;https://kc.kexinshe.com/t/81443&quot;&gt;https://k</summary>
      
    
    
    
    <category term="杂项" scheme="https://jameshoi.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>CSTC 2021逆向部分</title>
    <link href="https://jameshoi.github.io/2021/05/05/cstc-2021/"/>
    <id>https://jameshoi.github.io/2021/05/05/cstc-2021/</id>
    <published>2021-05-05T07:06:11.000Z</published>
    <updated>2022-01-10T19:13:14.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="free-flagfree-flag-zip"><a href="#free-flagfree-flag-zip" class="headerlink" title="free_flagfree_flag.zip"></a>free_flag<a href="free_flag.zip">free_flag.zip</a></h1><p>签到题，异或一下得flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enflag = [</span><br><span class="line">  <span class="number">0x78</span>, <span class="number">0x64</span>, <span class="number">0x3F</span>, <span class="number">0x53</span>, <span class="number">0x6D</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x64</span>, <span class="number">0x62</span>, <span class="number">0x3F</span>, </span><br><span class="line">  <span class="number">0x78</span>, <span class="number">0x3D</span>, <span class="number">0x6F</span>, <span class="number">0x38</span>, <span class="number">0x3D</span>, <span class="number">0x78</span>, <span class="number">0x3C</span>, <span class="number">0x62</span>, <span class="number">0x53</span>, <span class="number">0x39</span>, </span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x39</span>, <span class="number">0x78</span>, <span class="number">0x3F</span>, <span class="number">0x61</span>, <span class="number">0x53</span>, <span class="number">0x3D</span>, <span class="number">0x39</span>, <span class="number">0x53</span>, <span class="number">0x62</span>, </span><br><span class="line">  <span class="number">0x3C</span>, <span class="number">0x78</span>, <span class="number">0x53</span>, <span class="number">0x3C</span>, <span class="number">0x39</span>, <span class="number">0x53</span>, <span class="number">0x39</span>, <span class="number">0x3F</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, </span><br><span class="line">  <span class="number">0x7E</span>, <span class="number">0x3F</span>, <span class="number">0x0A</span></span><br><span class="line">]</span><br><span class="line">cipher = <span class="number">0xC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> enflag:</span><br><span class="line">    print(chr(s^cipher),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h1 id="crackme-crackme-zip"><a href="#crackme-crackme-zip" class="headerlink" title="crackme crackme.zip"></a>crackme <a href="crackme.zip">crackme.zip</a></h1><p>upx脱壳。用户名填入crackme，在判断位置断点，并让程序防止跳转，每次断点查看v17变量<br><img src="/2021/05/05/cstc-2021/upload_a18365a64b9e25a6a39d1a5a7bf73720.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">0x58</span>,<span class="number">0x42</span>,<span class="number">0x49</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x43</span>,<span class="number">0x45</span>,<span class="number">0x43</span>,<span class="number">0x53</span>,<span class="number">0x42</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    print(chr(i),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>md5 32位小写</p><h1 id="ckck-zip"><a href="#ckck-zip" class="headerlink" title="ckck.zip"></a>ck<a href="ck.zip">ck.zip</a></h1><p>题目说猜猜是什么加密算法，F5后已经可以盲猜一波base64换表<br><img src="/2021/05/05/cstc-2021/upload_4b3cf01ee63507d009737a3e6a4fe512.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">my_base64table = <span class="string">&quot;,.0fgWV#`/1Heox$~\&quot;2dity%_;j3csz^+@&#123;4bKrA&amp;=&#125;5laqB*-[69mpC()]78ndu&quot;</span></span><br><span class="line">std_base64table =<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">s = <span class="string">&quot;ef\&quot;^sVK@3r@Ke4e6%6`)&quot;</span></span><br><span class="line">s = s.translate(str.maketrans(my_base64table,std_base64table))</span><br><span class="line">print(base64.b64decode(s))</span><br><span class="line"><span class="comment">#04_tianhe233_29</span></span><br></pre></td></tr></table></figure><h1 id="mazemaze-zip"><a href="#mazemaze-zip" class="headerlink" title="mazemaze.zip"></a>maze<a href="maze.zip">maze.zip</a></h1><p>迷宫题，ssddwdwdddssaasasaaassddddwdds<br>即flag{545d406061561f34247732d50c56ef0d}<br><img src="/2021/05/05/cstc-2021/upload_373c1e4fb68633051d9ac8724f5df73a.png" alt></p><h1 id="ALL-IN-ALLALL-IN-ALL-zip"><a href="#ALL-IN-ALLALL-IN-ALL-zip" class="headerlink" title="ALL_IN_ALLALL_IN_ALL.zip"></a>ALL_IN_ALL<a href="ALL_IN_ALL.zip">ALL_IN_ALL.zip</a></h1><p>用frida-dexdump把壳脱掉，再用jeb打开dex，发现校验函数是checkSN<br><img src="/2021/05/05/cstc-2021/upload_6eb608d3746ba7a7bb6e044d406ff709.png" alt><br>因为没jeb付费版本…无奈只能用jadx，发现就是判断输入就是userName和md5<br><img src="/2021/05/05/cstc-2021/upload_cb308ced04cabbade1bc18d1ed65fba1.png" alt><br>通过用反射大师找到userName为HuMen<br><img src="/2021/05/05/cstc-2021/upload_a74f468405dafcfb53de01b1ce713201.png" alt><br>得到flag为flag{749fef1ed34917cc23376494813053b2}</p><h1 id="randrand-zip"><a href="#randrand-zip" class="headerlink" title="randrand.zip"></a>rand<a href="rand.zip">rand.zip</a></h1><p>有空再补</p><h1 id="DEXDEX-zip"><a href="#DEXDEX-zip" class="headerlink" title="DEXDEX.zip"></a>DEX<a href="DEX.zip">DEX.zip</a></h1><p>参考这篇文章学习dex格式<a href="https://www.cnblogs.com/dengkaiting/p/11069351.html">https://www.cnblogs.com/dengkaiting/p/11069351.html</a>，用jeb等软件打不开这个dex文件。用010editor进行分析，打开后有模板可以直接用，注意到有四个零值，前两个零值是正常的，但后面两个需要输入method和class的offset(偏移)，题目将这里修改为0了所以软件打不开。<br><img src="/2021/05/05/cstc-2021/1622016540354-a791ca00-0a85-44ea-9c4d-cae5c33f41a6.png" alt="image.png"><br>010editor已经将method和class的存储位置帮你找到了，在模板那里点一下即可跳转，如下图的method偏移为1561C，然后修改dex header的偏移即可（注意这里是小端序，若不知道是小端序还是大端序的话建议转10进制后直接在010的模板里修改）<br><img src="/2021/05/05/cstc-2021/1622016731342-0626029a-deb8-460e-810e-9832ae230955.png" alt="image.png"><br>用jeb打开dex进行分析，可见直接运行一次出flag<br><img src="/2021/05/05/cstc-2021/1622016844528-b6a21eed-7d50-4ba9-a9ba-2bd8382f605b.png" alt="image.png"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] x = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>.toCharArray();</span><br><span class="line">x[<span class="number">2</span>] = (<span class="keyword">char</span>)(x[<span class="number">2</span>] + x[<span class="number">3</span>] - <span class="number">50</span>);</span><br><span class="line">x[<span class="number">4</span>] = (<span class="keyword">char</span>)(x[<span class="number">2</span>] + x[<span class="number">5</span>] - <span class="number">0x30</span>);</span><br><span class="line">x[<span class="number">30</span>] = (<span class="keyword">char</span>)(x[<span class="number">0x1F</span>] + x[<span class="number">9</span>] - <span class="number">0x30</span>);</span><br><span class="line">x[<span class="number">14</span>] = (<span class="keyword">char</span>)(x[<span class="number">27</span>] + x[<span class="number">28</span>] - <span class="number">97</span>);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> a = x[<span class="number">0x1F</span> - i];</span><br><span class="line">x[<span class="number">0x1F</span> - i] = x[i];</span><br><span class="line">x[i] = a;</span><br><span class="line">&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag&#123;&quot;</span> + String.valueOf(x) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>flag{59acc538825054c7de4b26440c0999dd}</p><h1 id="motionmotion-zip"><a href="#motionmotion-zip" class="headerlink" title="motionmotion.zip"></a>motion<a href="motion.zip">motion.zip</a></h1><p>同上</p><h1 id="keygenkeygen-zip"><a href="#keygenkeygen-zip" class="headerlink" title="keygenkeygen.zip"></a>keygen<a href="keygen.zip">keygen.zip</a></h1><p>同上<br>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;free-flagfree-flag-zip&quot;&gt;&lt;a href=&quot;#free-flagfree-flag-zip&quot; class=&quot;headerlink&quot; title=&quot;free_flagfree_flag.zip&quot;&gt;&lt;/a&gt;free_flag&lt;a href=&quot;fr</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://jameshoi.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
